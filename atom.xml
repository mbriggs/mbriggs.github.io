<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Briggs]]></title>
  <link href="http://mattbriggs.net/atom.xml" rel="self"/>
  <link href="http://mattbriggs.net/"/>
  <updated>2015-06-02T20:05:45-04:00</updated>
  <id>http://mattbriggs.net/</id>
  <author>
    <name><![CDATA[Matt Briggs]]></name>
    <email><![CDATA[matt@mattbriggs.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The role of a Senior Developer]]></title>
    <link href="http://mattbriggs.net/blog/2015/06/01/the-role-of-a-senior-developer/"/>
    <updated>2015-06-01T12:18:26-04:00</updated>
    <id>http://mattbriggs.net/blog/2015/06/01/the-role-of-a-senior-developer</id>
    <content type="html"><![CDATA[<p>We work in a strange industry. There is a <em>much</em> higher need for developers than can be satisfied by new developers coming into the field. This is a problem that has existed for years, and it is getting worse as time goes on.</p>

<p>We have a serious shortage of talent to meet the demand, but our industry is really quite young . Most software projects fail. Nearly all of them come in over budget. The best guidance we have on this subject from thought leaders boils down to &ldquo;These are some common ways we solve these problems, but our solutions frequently don&rsquo;t work, so the only thing you can really do is try it out and see if it works for you&rdquo;.</p>

<p>The reality we live in is that &ldquo;Senior Developer&rdquo; means a person who has been slinging code for more then 3 years. These people are put into leadership positions, and typically things play out as you would expect &mdash; quite badly.</p>

<p>This is my take on the terms we use in the industry. Really, putting people into 3 buckets is a huge over-simplification of the nuance, knowledge, and experience of progressing through this profession, but it is what it is. If we are going to classify people in this way, then we need to take time in the industry off the table. A person with 10  years experience is quite different than someone who has experienced the same year 10 times.</p>

<h2>The stages of software developer growth</h2>

<p>As programmers, we live in a world of complex systems and variables. It is incredibly challenging to simply execute a well defined and focused task, especially if you are not terribly experienced with the tools at your disposal, or the codebase you are working on.</p>

<p>This is the life of the junior developer. You are fresh out of school, and think you know everything. Suddenly, you are faced with the fact that what you learned about in school was actually quite poor preparation for the types of problems you are encountering. Things are more messy. Less theoretically pure. You are existing in a realm of compromises, and can never make assumptions about anything.</p>

<p>Dealing with this is really all you can focus on, and it is what you really should be trying your best to learn. Junior developers need a lot of direction, supervision, and mentoring because of this, or they can stay in this place for a very, very long time (I recently encountered a fellow who had been building software for almost a decade who I would say is still a junior). You can say that this period is really about acquisition of tactical, day to day techniques.</p>

<p>A junior developer is code focused, not development focused, and doesn&rsquo;t understand the distinction. When a programmer talks about how they love coding if it weren&rsquo;t for all the users, I assume I am talking to a junior developer.</p>

<p><strong>A good junior developer can be given a known task, and be expected to execute it quickly, and well.</strong></p>

<p>An intermediate developer is one who begins to see patterns in failure (usually their own failure), and recognize that it takes a lot more than banging out focused tasks to actually build something that works, and will not completely fall over the first time someone needs to change it. They have also gone through the unique experience of looking at something they wrote a year ago they were extremely proud of, and realizing it was actually pure garbage.</p>

<p>An intermediate is someone who is looking for answers on how to build things The Right Way, and finding them through experimentation, literature, and discussion with other programmers. This level is really one of learning theory of the building of software, rather than the theory of building code (which is learned in school).</p>

<p>This theory acquisition is vital, but systems built by unsupervised intermediate developers are going to fail for completely different reasons than systems built by juniors. A junior will build a big pile of algorithms that sort of work. A good intermediate will build pages out of &ldquo;Design Patterns&rdquo; and &ldquo;Domain Driven Design&rdquo;. While those are great books for learning how to build large OO systems,  direct application of this sort of theory results in over engineered systems that are flexible in ways that don&rsquo;t matter, and inflexible in ones that do matter.</p>

<p>You can trust an intermediate to build systems that will work for far longer than a junior, but will lead to a different sort of disaster down the road. The sad fact is that the vast majority of not only senior developers, but team leaders are in fact, intermediate devs. Most do not realize this, and have the best intentions, but have simply never worked with anyone at a higher level.</p>

<p>Intermediates are quite aware of their role in their organization, and the value they bring. A good intermediate understands how using code to solve a problem is the means to an end, not the end in and of itself. However, they are still in love with ivory tower design, and are still on a quest for &ldquo;The Right Way&rdquo; to build software.</p>

<p><strong>A good intermediate developer needs less supervision. They can be trusted to raise issues of code design, and play a valuable role in design discussions. They are also the &ldquo;workhorses&rdquo; of the dev team. However, further mentoring and higher  level supervision is still vital.</strong></p>

<p>A senior developer is intimately familiar with their own failure. They written code both under, and over designed, and seen both fail. They are reflective about the things that they do, evaluating their successes and failures when approaching problems with intellectual honesty. A senior developer has fallen out of love of the complexity which dominates the intermediate, and is obsessed with simplicity.</p>

<p>A senior developer stops putting developers in buckets of &ldquo;good&rdquo; and &ldquo;bad&rdquo; based on knowledge, and instead understands that there is a spectrum of strengths and weaknesses.  They are more intimately aware of their own strengths and weaknesses than anyone else could ever be, and strive to play to their strengths whenever possible.</p>

<p>A senior developer thinks in terms of &ldquo;context&rdquo; when applying theory. They understand that there is no &ldquo;Right Way&rdquo; to build software, and that the only way to build good software is by adapting theory to fit the needs of the client, codebase, team, tools, and organization.</p>

<p>A senior developer understands that everything in our field involves tradeoff, and will look for what that is for design patterns, libraries, frameworks, and processes.</p>

<p>A senior developer thinks of more than just themselves. They are aware of how their organization and their clients work, what their values are, and what is both important and not important for success. When a ball is dropped, a senior developer will do what they can to pick it up. The phrase &ldquo;this is not my job&rdquo; is never, ever said in those situations.</p>

<p>A senior developer will understand that this job is to provide solutions to problems, not write code. Because of that, a senior developer will always think of what they are doing in terms of how much value it brings to their organization and their clients vs how much effort they are putting in.</p>

<p>While an intermediate will plow through days of boring work, a senior developer will take a step back and question what is breaking down to cause all that boring work to begin with. They will evaluate the cost of fixing root problems, and either fix them directly, or put things in motion so they will be fixed eventually.</p>

<p>A senior developer understands that you cannot do everything yourself, and that their primary role is to help their team get better, in many of the same ways they themselves strive for personal improvement.</p>

<p>A senior developer understands that leadership is not about power, it is about empowerment. It is not about direction, it is about serving.</p>

<p><strong>If you do not have at least one senior developer in a leadership role on your team, you are doomed for failure. A team of great intermediates will get you very far, but the days of the software you are building are numbered, and the end result is either closing shop, or costly / risky rewrites. A senior developer is the <em>only</em> person fully qualified to choose technology and platforms, so not having one from <em>day one</em> will hurt you.</strong></p>

<h2>This is a giant over-simplification</h2>

<p>The reality is nobody fits into these buckets perfectly. I am just tired of &ldquo;years of experience&rdquo; based classification. &ldquo;Years of experience&rdquo; tells you something, but is almost pointless information without a heck of a lot more context.</p>

<p>More than that, our industry values wicked smart young guys fresh out of university. Those people <em>are</em> valuable, and necessary, but so are people who have 15-20 years experience in the field. We need to stop hiring according to stereotypes, and really thinking of team and organizational talent composition. If everyone on your team thinks the same, you are doing your product and your organization a disservice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Rails Value Proposition No Longer Adds Up]]></title>
    <link href="http://mattbriggs.net/blog/2014/09/09/the-rails-value-proposition-no-longer-adds-up/"/>
    <updated>2014-09-09T09:28:57-04:00</updated>
    <id>http://mattbriggs.net/blog/2014/09/09/the-rails-value-proposition-no-longer-adds-up</id>
    <content type="html"><![CDATA[<p>In 2005, <a href="http://rubyonrails.org/">Ruby on Rails</a> was a <a href="http://www.youtube.com/watch?v=Gzj723LkRJY&amp;feature=youtu.be">breath of fresh air</a>,
and brought a revolution in how we build applications on the web. It
had cutting edge ideas, and real solutions to the problems people were
facing at the time. That was 8 years ago. If rails were to launch in
todays world, would anyone even notice?</p>

<h2>What makes rails amazing</h2>

<p>In 2005, most people making (serious) web applications were doing it
using <a href="http://www.oracle.com/technetwork/java/index.html">Java</a> and <a href="http://struts.apache.org/">struts</a>. Rails changed that, and it
did that by being amazing.</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a>. Instead of spending your first
weeks building structure, configuring infrastructure, and arguing
about how to architect your application, you have a fully functional
stack ready to go in seconds.</li>
<li>Great HTML generation. Rails has “AJAX” out of the box, without
having to build reams of nasty javascript yourself. It also has form
helpers, which make HTML make a bit more sense. It uses the
philosophy of paving over the rough parts of web technology when it
is possible, giving you more understandable and consistent mental
models to work with.</li>
<li>Rails ships with a test suite built in, and ways to test every layer
of the application.</li>
<li>Rails lets you quickly generate a scaffolding to give you a
functional base to start iterating on in seconds.</li>
<li>Rails has <a href="http://rubygems.org/">plugins</a> for pretty much all problems you will
ever run into with web development.</li>
<li>Rails uses <a href="https://www.ruby-lang.org/en/">Ruby</a>, which is a beautiful OO language, FAR more
powerful than Java.</li>
</ul>


<p>This is a pretty impressive list, many of these features were down
right revolutionary when they came out. The only serious downside, is
that rails is slow as a dog and eats ram like potato chips. But hey,
what is more expensive, building new features, or adding server
hardware? Adding more servers is a great problem to have, it means you
have a lot of clients giving you money who need service. Rails and
ruby are <em>Fast Enough</em>.</p>

<h2>Node.JS… the first cracks</h2>

<p>In 2005, <a href="http://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a> was a brave new world. “Smartphone” still meant
either <a href="http://mobilesphonez.blogspot.ca/2011/12/blackberry-models-pictures.html">Blackberry</a>, or <a href="https://www.google.ca/search?q=windows+mobile+6&amp;es_sm=119&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ei=A3QOVKLEIMGRgwTGkoHoCg&amp;ved=0CCcQsAQ&amp;biw=1585&amp;bih=1164">Windows Mobile 6</a>. By 2008, things
were starting to change. “Normal” people were interacting with online
services constantly throughout the day, no matter where they were.</p>

<p><a href="http://nodejs.org/">Node</a> arrived with a bang. It had the right capabilities at the
right time.</p>

<ul>
<li>Node is simple, and allows you to expose blocking services to the
web extremely easily.</li>
<li>Node is fast, and non-blocking, allowing you to leverage some of the
<a href="https://developer.mozilla.org/en/docs/WebSockets">more interesting</a> <a href="https://developer.mozilla.org/en-US/docs/Server-sent_events/Using_server-sent_events">features</a> available in modern
browsers.</li>
<li>Node is written in JavaScript, not as well designed a language as
ruby, but faster to build things with than Java, and known well by a
large percentage of web developers. JavaScript is asynchronous at
its core, and cheap asynchrony is what enables us to build the type
of things we are building today.</li>
</ul>


<p>You could still make an argument for rails, in that it was a very good
<em>framework</em>, while node takes more of a routing library approach to
building web applications. But even with rails maintaining a lot of
relevance, there was quite a big “brain drain” from the rails world to
the node world.</p>

<h2>Go and Clojure, where we are today.</h2>

<p>We are steadily approaching 2015, and the world of web application
development is continuing the steady shift that has been happen for
the last 7 years. Even though JavaScript allows for fast and easy
asynchrony, being limited to the reactor pattern can make certain
types of problems quite challenging. JavaScript isn’t the greatest
language at building large apps, and things like visibility, tuning,
and stability are forcing people to look for alternatives. The folks
at the cutting edge of the field are starting to move to alternatives,
and are finding them in one of two places — Google’s <a href="http://golang.org/">golang</a>, and
<a href="http://clojure.org/">Clojure</a>, a lisp dialect for the JVM.</p>

<p>Both of these are incredible languages for many reasons, two key
things they have in common is they are both exceptional at
asynchronous programming, and they are both very, very fast.</p>

<p>Let’s revisit the value proposition of rails.</p>

<ul>
<li>Convention over Configuration. It turns out the world hasn’t stood
still. Smart defaults and sane conventions are the norm in web
frameworks today. Java still kind of sucks, but
<a href="https://www.playframework.com/">Java 8 with the Play! framework</a> is actually not that far
behind the Ruby on Rails experience in developer productivity.</li>
<li>The only people still doing HTML generation for a new application
nowadays are folks building web “sites” instead of web “apps”. And
even there, a good front end developer will be frequently asking for
APIs over templated HTML.</li>
<li>Testing has taken the world by storm. People don’t talk about <em>if</em>
they test, they talk about <em>how</em> they test.</li>
<li>Maybe it is just folks I know, but experienced ruby developers tend
to wince nowadays when opening a colossal <a href="http://bundler.io/">Gemfile</a> in a
rails app for the first time. Each gem you add will change rails,
sometimes in a quite unexpected way. Not only that, but many are
poorly supported, and it is extremely rare to find one with
documentation. (beyond a README and method signature stubs)</li>
<li>Ruby is no longer in competition with Java. It is in competition
with other languages as productive and powerful, if not more so.</li>
</ul>


<p>And what about our big downside of performance? It turns out
performance is extremely, sometimes vitally important for us to build
the services we are asked to build today.</p>

<h2>What is so good about these other platforms?</h2>

<p>It is awesome to be able to build an application that crunches
reports, and give visibility into its data on demand. What is better
is an application that tells you about things you care about before
you even ask. Being able to push messages to your clients is an
amazingly powerful thing, and it is available today, on mature, well
tested platforms.</p>

<p>The other point is that performance really does matter in web
development. A company who spends
<a href="http://www.techempower.com/benchmarks/#section=data-r9&amp;hw=peak&amp;test=query">a fraction of the cost on hardware</a> is going to have
higher margins, and be able to buy more / better developers. When
rails was so far beyond its competition in terms of productivity, that
tradeoff was worth it. Nowadays, rails has serious competition in
terms of easy of use and productivity, and that tradeoff is very hard
to still justify.</p>

<h2>It no longer adds up.</h2>

<p>Rails is not a terrible framework, but its time has passed. There are
a lot of folks with a heavy rails investment, it probably doesn’t make
sense to move off of the platform for them, and they are the ones who
will keep the eco-system moving. But for new development, I think
rails should no longer be in the running. You are limiting the
capabilities and future of your product, and not getting enough in
return.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Impressions: Using Clojure at Work]]></title>
    <link href="http://mattbriggs.net/blog/2014/09/03/first-impressions-using-clojure-at-work/"/>
    <updated>2014-09-03T09:31:47-04:00</updated>
    <id>http://mattbriggs.net/blog/2014/09/03/first-impressions-using-clojure-at-work</id>
    <content type="html"><![CDATA[<p>TL;DR: I am a developer with a Java / C# / JavaScript / Rails background, and am building a small piece of infrastructure with Clojure at work. So far it has been a joy, and exceeded expectations.</p>

<p>I feel like I need to set the stage for this blog post. The first Clojure book I read was <a href="http://stuartsierra.com/">Stuart Sierra’s</a> excellent <a href="https://pragprog.com/book/shcloj/programming-Clojure">Programming Clojure</a> book back in 2009. At that point I had zero professional experience with functional, dynamic, or declarative styles of programming, and Clojure blew my mind. It fit well with how I like to think about programming, and shaped a lot of my ideals about the properties of good code.</p>

<p>Soon after, I left the C#/Java world behind, and worked at a company doing enterprise Ruby on Rails. Clojure helped me understand a lot of what ruby was trying to accomplish. It also paved the way to using <a href="http://www.gnu.org/software/emacs/">emacs</a>, and learning <a href="http://en.wikipedia.org/wiki/Emacs_Lisp">elisp</a>. During this time, I also became a card-carrying member of Rich Hickey’s cult of personality. It is hard not to hero worship the guy, after listening to him talk about <a href="http://www.youtube.com/watch?v=f84n5oFoZBc">how he thinks about big problems</a>, or <a href="http://www.infoq.com/presentations/Simple-Made-Easy">how he defines simplicity, and advocates its usage</a>. I think <a href="http://thechangelog.com/rich-hickeys-greatest-hits/">most of his talks</a> should be mandatory for people practicing software development, they are just that good.</p>

<p>So this is not from the perspective of a total newcomer to Clojure. This is from the perspective of a developer who has used rails for years, and yearned to be working on the other side of the fence.</p>

<h2>“But who wants to deal with all those parenthesis?”</h2>

<p>This has been the mantra of the lisp hater for the last 50 years. <a href="http://xkcd.com/297/">Lisp doesn’t look like anything else out there</a>, and has huge amount of parens as its primary form of syntax. This property may be off-putting at first, but it turns out that lisp parenthesis are a problem that has been solved pretty much completely. Once you get used to them and the tools which exist to interact with them, eventually you miss them when they are not there in other languages.</p>

<h3>Only read the opening parens</h3>

<p>There is a reason that people stack up all the closing parens at the end, because they are there for the <a href="http://en.wikipedia.org/wiki/Lisp_reader">lisp reader</a>, and for your editor. Lisp strikes an amazing balance between being very terse, and being extremely explicit. Balanced parens are a big part of what allows for that.</p>

<h3>Learn how to read code “inside out” at the same time as reading it “outside in”</h3>

<p>I found this the biggest hurdle when learning lisp. Logically, code is structured outside in, but it will execute inside out. This is “normal” as programming languages go, what isn’t normal is that idiomatic Clojure is built using nested expressions — a <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative style of programming</a>. <a href="http://www.pythonforbeginners.com/basics/list-comprehensions-in-python">Python comprehensions</a> are a similar thing, you need to learn how to read it properly. Before you do that, its foreign gibberish. Afterwards, they become a great, concise way to express common code.</p>

<h3>Use something capable of structural editing</h3>

<p>Your choice of editor is extremely important here. What you want is something that will allow you to extend / retract the scope of an s-expression, add a new s-expression / merge the current one into its parent (depth editing), enforce paren balancing, allow you to select your current expression easily, split it apart / join it together, etc. If you have these capabilities (<a href="https://cursiveclojure.com/userguide/paredit.html">structured editing</a>), then all those parens are a joy to work with. If you don’t have them, they will be the chore that they appear to be at first glance.</p>

<p>This may seem to be a pain at first, but proper tooling makes it a more joyful experience to work with parens then without them.</p>

<p>If you are looking for an IDE, <a href="https://cursiveclojure.com/">cursive</a> seems to be the best bet. If you are using <a href="http://www.gnu.org/software/emacs/">emacs</a>, its <a href="http://clojure.jr0cket.co.uk/perfect-environment/paredit-guide">paredit</a> or <a href="https://github.com/Fuco1/smartparens">smartparens</a>. If  you are using <a href="http://www.vim.org/">vim</a>, it is <a href="https://github.com/vim-scripts/paredit.vim">paredit.vim</a>.</p>

<h2>Using Clojure at work</h2>

<p>There is a huge difference using something from a hobbyist point of view, and using it 8+ hours a day. Some of my challenges were</p>

<ul>
<li>logging</li>
<li>wrapping my head around “interactive development”</li>
<li>common “new platform” issues (basic syntax / idioms that need to be fully grasped)</li>
</ul>


<p>I am building a fairly simple application which watches the end of a queue, and perform actions on external resources based on the message. It is currently sitting at ~400loc, and is the sort of thing where if it breaks 1000loc it will be way overdue to be broken apart into smaller apps.</p>

<p>It is not that much output for the time I put into it, but it was my first time building something serious on the platform, as well as the first time I worked with AMQP.</p>

<h3>Logging</h3>

<p>Clojure inherits Java’s insanely complex logging legacy, and understanding what the hell is going on took me easily more then half a day. At first, there was no logging frameworks for Java, so IBM released log4j, which is incredibly powerful, and does pretty much everything you could want from a logging framework. Sun didn’t really like how everyone was using a vital piece of infrastructure like logging from IBM, so they built java.util.Logging, not quite as good, but built into the platform.</p>

<p>Since logging is something that things like libraries need to do quite frequently, this split become quite nightmarish. So people started using a logging abstraction frameworks, the most recent of which is slf4j.</p>

<p>Now, Java interop in Clojure is absolutely fantastic, and it is not uncommon to use Java libraries directly. So Clojure adds another layer to the onion — clojure.tools.logging, which is an abstraction layer over the java abstraction layers…</p>

<p>Long story short: if you are building a new project, what you want is <a href="https://github.com/clojure/tools.logging">clojure.tools.logging</a> with <a href="http://www.slf4j.org/">slf4j</a> and <a href="http://logback.qos.ch/">logback</a>. This is the current “recommended stack”, and is incredibly powerful, if quite complex.</p>

<h3>Interactive Development</h3>

<p>Lisp developers practice something called “interactive development”, where they are constantly interacting with a running instance of their application. If you are a rails developer, you may be saying “no big deal, we have rails console!”. Imagine a console that is always attached to the development <em>instance</em> of your application, not as its own process. Now, imagine your editor could send it commands, like “run all the tests”, or “load changed code” or “reload application configuration”, and it would perform these tasks <em>instantly</em>. Imagine your editor could query the repl very quickly and efficiently for auto-completions and for symbol locations in the codebase. Imaging your editor could ask it for function documentation and method signatures. Imagine that the repl was embedded into your editor, living side by side with your code, always ready to give immediate feedback on the code you wrote or are debugging.</p>

<p>This is interactive development.</p>

<p>Modern IDEs approach this level of quality of life, but only for languages which are friendly to tooling. But they tend to lose a lot of their power, and sometimes downright lie when it comes to dynamic languages.</p>

<h4>Interactive Development vs TDD</h4>

<p>Clojure folks are known for their disdain of Test Driven Development. TDD comes at a high cost; writing, running, and maintaining a comprehensive test suite can become a substantial portion of the cost of building and maintaining an application. But that test suite gives you a benefit that makes it worthwhile, it allows you close to instant feedback on whether a change did what you thought it was going to do.</p>

<p>Getting that feedback is extremely difficult in Object Oriented languages. The reason for that is that most methods interact with state, so to reliably get feedback on a change, you need to get feedback on that function running against an object with as many variations of state it is likely to have.</p>

<p>By contrast, in clojure you usually have a lot of small functions that take inputs and return outputs, a few functions that perform side effects, and then “abstraction” functions which tie everything together and do something interesting. Because the pieces are much more granular, and state is treated as a dangerous property rather then tied into the most fundamental building blocks of the language, it turns out getting quick feedback on a function is typically incredibly simple.</p>

<p>Here is an example of interactive development of a small function which takes a clojure keyword and turns it into something ruby would expect from a hash key</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">message/rubyify-keyword</span> <span class="ss">:hi-buddy</span><span class="p">)</span>
</span><span class='line'><span class="ss">::hi-buddy</span>
</span><span class='line'><span class="ss">:reloading</span> <span class="p">(</span><span class="nf">poops.message</span> <span class="nv">poops.message-test</span> <span class="nv">poops.core</span> <span class="nv">poops.core-test</span> <span class="nv">user</span><span class="p">)</span>
</span><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">message/rubyify-keyword</span> <span class="ss">:hi-buddy</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;:hi_buddy&quot;</span>
</span><span class='line'><span class="ss">:reloading</span> <span class="p">(</span><span class="nf">poops.message</span> <span class="nv">poops.message-test</span> <span class="nv">poops.core</span> <span class="nv">poops.core-test</span> <span class="nv">user</span><span class="p">)</span>
</span><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">message/rubyify-keyword</span> <span class="ss">:hi-buddy</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;hi_buddy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>that whole process took in the range of 5-10 seconds, which is FAR less then I would expect if I had test driven it. What I am missing from this is that if I want to test it in the future, I have to repeat what I wrote in the repl. But that is totally fine, this function has no dependancies (which unit tests suck at testing anyways if they live outside the class under test), and it either works or it doesn’t work.</p>

<p>This this is not to say that unit tests have no place in a clojure project, or that test driving code is something which is never useful on the platform — both still have their place. But the properties of the language design coupled with the incredible power you get from interactive development changes the value proposition of using these practices for the majority of code you write.</p>

<h4>Unit Testing can still make sense in clojure</h4>

<p>So where does unit testing still make sense? It’s very easy — listen to the code! In my opinion, the prime lesson of TDD is never make a change without getting feedback on it, the tighter that feedback cycle the better. If you find it starting to be a pain to get feedback through the REPL, write a test! This is what they are good at, taking the effort away and shrinking that feedback loop.</p>

<p>I am far from an expert, and my view on these things will probably change over time, but these are some examples of situations where the REPL probably wouldn’t cut it.</p>

<ul>
<li>Functions which have a high number code paths without being “coordinators” (who should be end to end tested, not unit tested)</li>
<li>Functions which perform a calculation that depends on more then a single property of their arguments. Testing these would require multiple calls for every change, probably better to automate it.</li>
<li>Functions that deal with money calculations. I tend to pay attention to this type of code as much as I possibly can, because I am terrified of screwing it up.</li>
</ul>


<p>This type of code should also be minimized, and isolated if at all possible. The ideal function takes an argument, and returns a value, it is good to keep to that ideal as much as possible.</p>

<h4>Interactive Development vs Acceptance Testing</h4>

<p>“Acceptance” testing is very different then Unit testing, but clojure has you covered here too. The <code>user</code> namespace is basically there to be decked out with functions and tools to make your life easier. In my case, I was dealing with inputs coming from a RabbitMQ queue, and outputs getting published to different queues.</p>

<p>Rabbit has a great feature that lets you create transient queues which disappear when the connection closes. I use those during development, and have a few helper functions which will test my whole code base.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">watch</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">core/watch-for-assets</span> <span class="nv">system</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">publish-bad-message</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">queue/publish</span> <span class="p">(</span><span class="ss">:print-assets-q</span> <span class="nv">system</span><span class="p">)</span> <span class="p">{</span><span class="ss">:fart</span> <span class="s">&quot;butt&quot;</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">publish-test-message</span>
</span><span class='line'>  <span class="p">([]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">publish-test-message</span> <span class="mi">366</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">([</span><span class="nv">id</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">queue/publish</span> <span class="p">(</span><span class="ss">:print-assets-q</span> <span class="nv">system</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span><span class="ss">:id</span> <span class="mi">1</span> <span class="ss">:artwork_id</span> <span class="nv">id</span> <span class="ss">:device_id</span> <span class="mi">2</span> <span class="ss">:product_type</span> <span class="s">&quot;type&quot;</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, getting end to end feedback means typing <code>(watch)</code> followed by <code>(publish-test-message)</code> in my repl.</p>

<p>Unlike unit tests, this is most definitely not a scalable replacement. It will however take you surprisingly far.</p>

<h3>Expected “Platform Issues”</h3>

<p>Surprisingly, the switch from Object Oriented code to clojure was quite simple for me. You end up with similar separations of code, just the code isn’t attached to the data. So an object with functions maps easily to a namespace with functions which operate on similar (or the same) data-structures.</p>

<p>Most of my time dealing issues with working on clojure came down to not being comfortable with basic syntax and idioms. For example, there is no implicit <code>do</code> in a <code>catch</code> expression, anything after the first expression is treated as <code>finally</code>. Or <code>slurp</code> and <code>spit</code> only work with text, not binary data. You kind of expect this sort of thing going in, I feel in a few more weeks I wouldnt be hitting those roadblocks.</p>

<p>Using <a href="http://clojurerabbitmq.info/">Langohr</a> for <a href="http://www.rabbitmq.com/">RabbitMQ</a> probably added some time, since it doesn’t try to hide <a href="http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP</a> behind layers of sugar. But at this point I feel pretty comfortable in my understanding of what is going on, so that was probably time well spent.</p>

<h2>Overall impressions</h2>

<p>I went into this <strong>extremely</strong> prepared, and very biased in favour of clojure. What I am working on will probably not be enough to hit the major pain points of using the language, so I am still in the “honeymoon” phase of using a new platform.</p>

<p>That being said, I have found the development experience to be absolutely delightful. I find in general, clojure libraries, and developers, seem to be very high quality. My big take away is how profoundly awesome interactive development can be. I am a big fan of testing, and have spent a large part of my career learning how to do it well. As someone with a huge investment in testing culture, I would call life without the constant need to write tests downright freeing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Learned to Stop Worrying, and Love Dart]]></title>
    <link href="http://mattbriggs.net/blog/2014/03/10/how-i-learned-to-stop-worrying/"/>
    <updated>2014-03-10T21:04:28-04:00</updated>
    <id>http://mattbriggs.net/blog/2014/03/10/how-i-learned-to-stop-worrying</id>
    <content type="html"><![CDATA[<p><a href="https://www.dartlang.org/">Darts</a> history is a little spotty, to put it lightly. When it came out, Google billed it as the JavaScript killer (which it&rsquo;s not), followed by saying it&rsquo;s not the JavaScript killer, it&rsquo;s going to be the dominant mobile platform. Then it wasn&rsquo;t about mobile, or replacing JS anymore, it was a compile-to-js language, and that would be its future.</p>

<p>As someone who tries hard to stay ahead of the curve when it comes to web technology, it was on my radar, but I wasn&rsquo;t terribly interested. It is not exactly an exciting or super interesting language (like <a href="https://github.com/clojure/clojurescript/wiki">clojurescript</a> or <a href="http://roy.brianmckenna.org/">roy</a>), and it seemed to have a questionable future &mdash; Google itself didn&rsquo;t seem to know what it was good for. Finally, the JS interop seemed kind of &ldquo;meh&rdquo;, so using it pretty much meant giving up on the JS eco-system.</p>

<p>Fast forward a few years, and it&rsquo;s situation is dramatically different. It managed to break 1.0, which is always a good sign for a language. Google is starting to push it quite a bit internally, which means it will have an investment in its continuing growth and improvement. There are hard plans for it to get into chrome. The <code>dart2js</code> compiler is approaching vanilla javascript speeds.  And finally, you can build really cool web applications with it, as <a href="https://angulardart.org/">AngularDart</a> is nearing 1.0.</p>

<p>I think at this point, there is a good chance that dart will be a &ldquo;thing&rdquo;. Dart killing JavaScript? That outcome is too far in the future to be predicted. But it doesn&rsquo;t have to kill JavaScript to develop a viable community and infrastructure of its own.</p>

<h1>Dart, The Language</h1>

<p>The first thing to talk about is types. The dynamic revolution has happened, static types are definitely not &ldquo;in&rdquo;. However, what most people rail against in type systems is essentially the Java implementation. Dart takes a very different, more tasteful approach.</p>

<p>First, there is no runtime type checking. The type system is only there to catch a certain class of compile time errors for you, provide documentation, and give you the tools to express protocols and interfaces explicitly. If you don&rsquo;t want to use static typing for something, you don&rsquo;t have to. In fact, the official Dart style guide says type annotations should only be used in method / class signatures. What that means is that we are going from building out documentation like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @description</span>
</span><span class='line'><span class="cm"> * It foos the bar.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param {string} bin</span>
</span><span class='line'><span class="cm"> * @param {string[]} baz</span>
</span><span class='line'><span class="cm"> * @returns boolean</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">foobar</span><span class="p">(</span><span class="nx">bin</span><span class="p">,</span> <span class="nx">baz</span><span class="p">){</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * It foos the bar</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">foobar</span><span class="p">(</span><span class="kt">String</span> <span class="n">bin</span><span class="p">,</span> <span class="kt">String</span><span class="p">[]</span> <span class="n">baz</span><span class="p">){</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You are expressing the exact same information, only</p>

<ul>
<li>it is easier to read</li>
<li>it is easier for your editor to parse</li>
<li>it will throw compile time errors for you when you do something dumb</li>
</ul>


<p>I understand that people don&rsquo;t want to code in Java anymore. I dig it, I don&rsquo;t really like the Java language either. This isn&rsquo;t Java, and by unilaterally panning anything with any form of static type checking, you are really doing yourself a disservice. Darts optional type system gives you another tool to help find bugs during dev mode, while maintaining the flexibility and readability of dynamic languages.</p>

<h1>Classes and their Interfaces</h1>

<p>Classes are pretty straight forward in Dart. The first thing I read about them that was interesting is the way constructors are handled.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">class</span> <span class="nc">Foobar</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">String</span> <span class="n">foo</span><span class="p">;</span> <span class="c1">// class field</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// default constructor</span>
</span><span class='line'>  <span class="n">Foobar</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">foo</span> <span class="o">=</span> <span class="s2">&quot;Something&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// named constructor which takes a string, and assigns it to the foo field</span>
</span><span class='line'>  <span class="n">Foobar</span><span class="p">.</span><span class="n">withValues</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foobar</span><span class="p">();</span> <span class="c1">// invokes the first constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="n">foo2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foobar</span><span class="p">.</span><span class="n">withValues</span><span class="p">(</span><span class="s2">&quot;hi!&quot;</span><span class="p">);</span> <span class="c1">// invokes the second constructor</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>this.foo</code> assignment syntax is actually really, really cool. I do my best to keep complex logic out of constructors, so this style of constructor lets me move away from <code>left_hand = right_hand</code> style code. That kind of code is pure boilerplate, and can hide a surprising amount of bugs if there is enough of it.</p>

<p>Since Dart does not support overloading, multiple constructors could potentially be a problem. Dart solves this with named constructors, which actually solve the issue in an interesting way. You can have multiple constructors for different purposes, and actually give a name to why you have them.</p>

<p>One property that is really cool about Dart classes are that they have an implicit interface. So lets say we have a <code>Vehicle</code> class, which takes an <code>Engine</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">class</span> <span class="nc">Vehicle</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Engine</span> <span class="n">engine</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vehicle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">engine</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Engine</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">start</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s2">&quot;vroom!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">vehicle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vehicle</span><span class="p">(</span><span class="k">new</span> <span class="n">Engine</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later on, you want to be able to pass different types of engines into a vehicle. There are several different ways you can go, but implicit interfaces allow you to do a type of pattern that is very similar to duck typing in dynamic languages.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="kd">class</span> <span class="nc">Vehicle</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Engine</span> <span class="n">engine</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vehicle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">engine</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Engine</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">start</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s2">&quot;vroom!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">RocketEngine</span> <span class="kd">implements</span> <span class="n">Engine</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">start</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s2">&quot;to the moon!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">vehicle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vehicle</span><span class="p">(</span><span class="k">new</span> <span class="n">RocketEngine</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can keep <code>Engine</code> as a basic, default implementation. By having <code>RocketEngine</code> implement <code>Engine</code>, it means that it can be used in places <code>Engine</code> can be used. This allows for a code structure that is very similar to what you would find in dynamic languages. The difference is that in Dart, if <code>RocketEngine</code> ever falls out of sync with the <code>Engine</code> interface, the type checker will let you know.</p>

<h1><code>this</code> and <code>function</code>, I will not miss you at all.</h1>

<p>One of the most irritating things about the javascript syntax is that you end up typing <code>this</code> and <code>function</code>. You type them a lot. A hell of a lot. Often, multiple times per line.</p>

<p>In Dart, <code>this</code> becomes optional when referring to class / instance members. Most functions you write will be methods, when you are doing anonymous functions, you can use the <code>() =&gt;</code> syntax instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dart'><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">].</span><span class="n">map</span><span class="p">((</span><span class="n">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="m">2</span><span class="p">);</span> <span class="c1">//=&gt; [2, 4, 6]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>What is better then Angular? AngularDart, thats what.</h1>

<p>AngularDart takes the good parts of angular, and cleans up some of the cruft. For example, there is a unified model for injectable components. So instead of having directives be a strange psudo-dsl, controllers be constructor functions, and services be functions that return objects, they are all implemented as classes. Each class has it&rsquo;s angular specific functionality configured via class annotation.</p>

<p>Another key difference is that instead of element and attribute directives, directives are now explicitly encouraged only for attributes. If you want to implement an element, you probably want to use the new primitive of &ldquo;Component&rdquo;, which is implemented using web components and the shadow DOM.</p>

<p>AngularDart compared to AngularJS is a fairly involved topic, and I doubt I could do as good a job explaining as my friend <a href="http://victorsavkin.com/post/72452331552/angulardart-for-angularjs-developers-introduction-to">Victor Savkin does here</a>.</p>

<p>AngularDart brings a level of practicality to Dart. It is a modern, top tier framework for building web applications in a productive and maintainable fashion. Realistically, for Dart to start gaining traction in the mainstream, this was required. Now it is here.</p>

<h1>Dart is here, and you should pay attention to it.</h1>

<p>With ES6 coming down the pipe, many of the warts and problems with JavaScript will be addressed. However, many will not, as JavaScript needs to maintain backwards compatibility. However, that is not a cross that Dart has to bear, allowing for a very clean (albeit a bit boring) javascript-y language that will run in browsers. The benefits you see are in a much cleaner DOM API, promises used consistently for async, and an extensive, full featured standard library.</p>

<p>Dart is still not my favourite language in the world, but it is a good, consistent, clean language. Which is something we are sorely lacking in the world of the browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Organization in Angular]]></title>
    <link href="http://mattbriggs.net/blog/2014/01/22/code-organization-in-angular/"/>
    <updated>2014-01-22T14:57:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2014/01/22/code-organization-in-angular</id>
    <content type="html"><![CDATA[<p>The number one question I see over and over with programmers new to angular is &ldquo;how do I organize my code?&rdquo;. I think that this is because the way you organize sample code is completely different then simple code, which again, is totally different then a complex application, and those transitions are not self-evident.</p>

<h2>Sample Code &ndash; aka One Big File</h2>

<p>This is how you see most code on the internet</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;foobar&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyCoolController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// controller</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;evenCoolerDirective&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'> <span class="c1">// directive</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This makes a lot of sense when you are showing some sample code. But it will very quickly become unwieldy and difficult to work with if you are building anything even slightly complex. I would not recommend using this for anything you would check into source control.</p>

<h2>Simple App &ndash; aka The Angular-Seed Method</h2>

<p>The angular project published a sample &ldquo;boilerplate&rdquo; project called &ldquo;angular-seed&rdquo;, as a way to help developers new to angular get rolling without having to do a bunch of grunt work.</p>

<p>The way angular-seed organizes it&rsquo;s files is by type. In a nutshell, it looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// in app.js</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;app.directives&#39;</span><span class="p">,</span> <span class="s1">&#39;app.services&#39;</span><span class="p">,</span> <span class="s1">&#39;app.controllers&#39;</span><span class="p">,</span> <span class="s1">&#39;app.filters&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in app.directives.js</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app.directives&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">// stuff</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in app.services.js</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app.services&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">// stuff</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in app.controllers.js</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app.controllers&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">// stuff</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in app.filters.js</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app.filters&#39;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myFilters&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">// stuff</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has the advantage of at least giving you <em>some</em> precision when trying to locate a given piece of code. It will also scale up well enough so that it is still usable by the time you finish building a simple application.</p>

<p>The problem here is what happens if you are not building a simple application? What happens if you have dozens of directives, and hundreds of controllers and services? At that point, 5 files won&rsquo;t help much.</p>

<h2>Splitting your application up into modules</h2>

<p>This is widely considered to be the best way to organize non-trivial angular code. The idea is instead of thinking of your application as one giant thing, think of it as a number of small, independent modules that come together to form a giant application.</p>

<p>The benefit to structuring your code this way extends beyond being able to find things easily. People get into trouble when building large scale code bases by not thinking about dependancies. When everything in your app can &ldquo;talk to&rdquo; anything else in your app, those dependancies are everywhere. This means that even small, innocuous changes can impact things you couldn&rsquo;t foresee, causing bugs. It also means when you want to re-design something, it is extremely difficult, because it means changing how it is used everywhere in the rest of your application.</p>

<p>This is a very large and complex topic, but as a general rule of thumb, thinking of your application as a group of small, self-contained modules with a limited API used to communicate with each other will go a long way towards the long term health and maintainability of your codebase.</p>

<p>Thankfully, angular has a module construct. Unfortunately, it is extremely primitive, and most of this &ldquo;encapsulation&rdquo; will have to exist in your own head.</p>

<p>When splitting your application apart this way, every module is given its own folder, which contains all the code required for that section of the codebase. These modules should be as small as possible, and should be as self contained as possible. It helps a lot with the containment if you use require.js.</p>

<h2>Angular and Require.js</h2>

<p>Do you even need require if you have angular? There is a lot of division on this topic, many people feel that since angular takes care of most application dependancy issues for you, that you can use a simpler build system and punt on require all together.</p>

<p>I think the real power in require (compared to other module loaders) comes from how you are divorcing dev-time file loading from production-time loading. Since angular has no story at all on file loading (only dependancy management), I think the need for that power is inevitable. You can embrace it immediately, or wait until you feel the pain, but hundreds of files coming down at the same time when the application loads will be brutal to develop against.</p>

<p>But beyond that, since there is no such thing as a module level injectable in angular (all dependancy injection draws from the same pool), it means if you want to have a module level model or service, it is impossible to control visibility. When you use require, you can have source level dependancies which are not published to the rest of the system, and use the angular dependancy injection for exposing an API.</p>

<p>This has worked great for me so far, with the sole exception that it is fairly common that I want to use <code>$http</code> for repository classes (would be the same issue if you wanted to use <code>$resource</code>). In these cases, I will pull that dependancy out of angular, and keep a reference in some sort of shared utility file (or base class). This can be done fairly easily</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">injector</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">injector</span><span class="p">([</span><span class="s1">&#39;ng&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;$http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// .instanciate can also be used if you want it to &quot;new&quot; something for you</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main purpose of dependancy injection in angular is so that you can wire up UI code declaratively, while keeping everything easy to test. Since services like <code>$http</code> are on the edges of the system, I don&rsquo;t think it is going against the spirit of the framework to pull them out. Hopefully, the angular team will add module level visibility in the future, and the whole issue will just go away.</p>

<h2>Choosing what is right for your project</h2>

<p>Since angular has taken such a hands off approach to the subject of code organization, there really is no &ldquo;right&rdquo; answer on what you should use. I have described some common (and less common) ways that people have found work for them, but it really comes down to a project by project choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transclusion in Angular]]></title>
    <link href="http://mattbriggs.net/blog/2014/01/22/transclusion-in-angular/"/>
    <updated>2014-01-22T14:54:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2014/01/22/transclusion-in-angular</id>
    <content type="html"><![CDATA[<p>Transclusion is almost a gift to people criticizing Angular. It sounds incredibly complicated and computer-science-y. The spotty documentation around the topic and mysterious API only adds to the illusion of what a complicated concept this is. In practice, transclusion is a fairly simple concept, and one that is necessary if you are writing more advanced directives in angular.</p>

<p>In this post, when I talk about the &ldquo;end user&rdquo;, I am referring to the developer using the directive (not the user who uses the application).</p>

<h2>So WTF does it mean anyways?</h2>

<p>The wikipedia definition of transclusion is really pretty simple.</p>

<blockquote><p>In computer science, transclusion is the inclusion of a document or part of a document into another document by reference.</p></blockquote>

<p>So in the context of angular, transclusion would be the embedding of an end user template into the directive template, or the directive template into the end user template. To put it more simply, have a directive (with a template) that either wraps, or is wrapped by end user code.</p>

<h2>Basic Transclusion</h2>

<p>Basic transclusion is when you are simply wrapping end user code. Let&rsquo;s say, for some reason, you are building a blog where each post needs to be programmed in (I know, kind of silly, but just work with me here :) The post would have meta information as attributes, and the content of the directive would become the post body.</p>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/NSgVfO6PsgmeK9BO83TU/preview'></iframe>


<p>There are two key pieces that make transclusion happen. First, <code>transclude: true</code> in the directive declaration tells angular we are performing transclusion.</p>

<p>The second piece is the presence of the <code>ng-transclude</code> directive in the <code>post</code> template. This tells angular where to embed the end user template.</p>

<h2>Gotcha: Transclusion and scope</h2>

<p>A big thing to keep in mind is that since this is the end users code, it requires the context of the scope tree, not the isolated scope of the directive. Because of that, transcluded content scope is <strong>not</strong> the child of the directive scope, it is instead a child of the directives parent scope, effectively making it like the directive scope does not exist in the inheritance chain.</p>

<h2>transclude: element</h2>

<p><code>transclude: true</code> allows us to wrap a user&rsquo;s template with our template. But what about when we want to wrap <em>everything</em> in a template? For example, we are building a directive that displays a panel under an input box. The easiest way to do this sort of positioning is when you have a wrapper to position against. Here is a quick example</p>

<iframe style='width: 100%; height: ; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/PwcrFh6OSpqwxQ7drpxe/preview'></iframe>


<p>If you look at the compiled DOM, you will see something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;drop-panel is-active&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">drop-panel=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-transclude=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">drop-panel=</span><span class="s">&quot;&quot;</span> <span class="na">class=</span><span class="s">&quot;ng-scope&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;drop-panel-panel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    This is some panel content
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>transclude: element</code> means that the entire element was transcluded into the <code>ng-transclude</code> placeholder (rather then just the elements children). <code>replace: true</code> allows us to define a new root node for the directive, so this is also necessary for wrapping to work.</p>

<h2>Transclude linker function for ultimate power</h2>

<p><code>transclude</code> gives a lot of power, but what happens when you need total control over the transclusion process? This is very rare, but can be needed if you need to transclude the end users template multiple times, or need to choose where to transclude based on some kind of logic (maybe as part of compile). For these cases, angular provides the transclude linker function, which lets you do pretty much anything you want.</p>

<p>Let&rsquo;s say you were building a directive which duplicated it&rsquo;s content a specified amount of times. Each duplication will have access to an <code>$index</code> property on the scope, that will tell it what number it is in the list.</p>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/eMCl0kygah7dPzqKP0W8/preview'></iframe>


<p>If you understand this, you understand the core of how <code>ng-repeat</code> works, which is one of the most complex directives that ships with angular.</p>

<p>For this one, since we aren&rsquo;t defining a new root element, we don&rsquo;t need <code>replace: true</code>. When <code>replace</code> is set to <code>false</code> (the default), and <code>transclude: 'element'</code> is set, what is actually inserted into the dom is a comment. The way this duplicate directive works is that each &ldquo;duplication&rdquo; is inserted after the previous one, and the first one is inserted after that comment.</p>

<p>You may also notice that <code>priority</code> is set very high. This is because we want our duplication to happen before any other directive gets applied.</p>

<p>Finally, since we are not using <code>ng-transclude</code>, we need to take care of what scope we want our duplication to link to. We do this by manually creating inherited scopes, and setting the <code>$index</code> property accordingly.</p>

<h2>Keys to the City</h2>

<p>Transclusion is considered an advanced topic, but as you can see, there is nothing to be scared of. Even at its most complex, as long as you understand how scope and linking works, transclusion is very easy to understand. This is what I believe to be one of the strengths in the design of angular, everything in the framework is built on top of a handful of core abstractions. If you have a good foundational understanding, advanced topics come very easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scope in Angular]]></title>
    <link href="http://mattbriggs.net/blog/2014/01/22/scope-in-angular/"/>
    <updated>2014-01-22T14:34:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2014/01/22/scope-in-angular</id>
    <content type="html"><![CDATA[<p>Angular goes in a different direction then most other frameworks, by having the html you write drive the composition of UI components. This allows you to succinctly wire up components without boilerplate, but it also creates some issues. How do you share data? How to components get configured? How do components communicate with each other, or the outside world? The part of angular which answers these questions is scope.</p>

<h2>What is scope?</h2>

<p>The purpose of scope is to hold shared UI state of an element and it&rsquo;s descendants. Since the UI is defined as a tree of nodes, the scope of an element is visible to all descendants of that element. When a descendant introduces a new scope, the new scope inherits properties of it&rsquo;s parent scope.</p>

<p>This is a very elegant solution to the problem, since the further you go down the DOM tree, the more specific the data requirements get.</p>

<p>As an example, here is an extremely basic employee directory, which allows people to add contacts to their personal directories.</p>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/AsGQlxSpdOOhIlG9wi4u/preview'></iframe>


<p>There is 3 levels of scope in play here. The first is the root scope, which is defined automatically by the angular bootstrapping process. The second is the directory level, which is created by <code>ng-controller</code>. The third level is the employee elements, which are created by <code>ng-repeat</code>.</p>

<p>Each level inherits from the previous level as illustrated here</p>

<p><img src="http://mattbriggs.net/images/scopes/scope_tree.png" alt="scope tree" /></p>

<p>This inheritance is very important, as you can see with what is happening with the &ldquo;add to my directory&rdquo; button. <code>currentUser</code> being on the root scope means it is available to all child scopes, so even though most of what needs to happen at the employee scope level is satisfied with the <code>employee</code> object, it is still able to see <code>currentUser</code> if needed.</p>

<h4>ZOMG global state!</h4>

<p>This may be a bit terrifying, especially for JavaScript developers. The difference between this and global state is that the scope tree is directly linked to the DOM tree.</p>

<p>If two different nodes share a parent, usually there is a reason, and if you put state on that parent node, usually it is very applicable to both children. Those children don&rsquo;t make much sense without the parent, so it becomes unlikely they will be accidentally separated.</p>

<p>As long as you keep your state as localized as possible, having state inheritance is a very elegant solution to the very tricky problem of sharing data.</p>

<p>That being said, if you publish everything on <code>$rootScope</code>, yes that is global state, and yes, that is bad. Don&rsquo;t do that.</p>

<h2>Using scope in directives</h2>

<p>Using scope is pretty straight forward when using things like <code>ng-controller</code> and <code>ng-bind</code>. But how about a directive which interacts with the scope?</p>

<p>Here is a directive which exposes a number from the scope, and whether or not the number is even or odd.</p>

<iframe style='width: 100%; height: 300px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/SZ1VBX53EidtFEzV2SrD/preview'></iframe>


<p>The way angular achieves its data binding, is by constantly checking values on scopes to see if they have changed. This is accomplished by <code>scope.$watch</code>. Angular will automatically create <code>$watch</code> expressions for any data binding you give it, but you can also add custom ones. Every time angular thinks something may have changed, it will call the <code>$digest</code> method on the appropriate scopes, which cycles through watch expressions looking for changes. If an expression is found to have changed, angular will execute whatever the callback is.</p>

<p>Another interesting thing here is the <code>$parse</code> service. <code>$parse</code> is the way angular translates expressions (the things inside <code>{{}}</code>) into javascript. Angular will automatically wrap an expression passed into <code>scope.$watch</code> as a string, but since we are going to assign a value to the same expression, it makes more sense to wrap it ourselves.</p>

<p>Most of the rest of the <code>link</code> function is around synchronizing the value of number from the outer scope to the inner scope. The reason for that is that this directive has a template which requires the number to be passed into it (via <code>ng-model</code>). Because of that, we need a fixed, known value for the scope.</p>

<h2>Isolate scope</h2>

<p>Now, what we have here works, but there is quite a bit of &ldquo;manual lifting&rdquo; going on. It would be nice if the framework could handle that two way scope synchronization for you, wouldn&rsquo;t it? Well it can, using a feature called isolate scope.</p>

<p>Normally, scopes will inherit from their parent. But in the case of directives, this can be undesired. A directive is a generic piece of functionality, and the scope is full of application and context specific values. Isolate scope allows a directive to create a &ldquo;scope sandbox&rdquo;, cutting it off from the rest of the scope tree, except for specific values. Here is the previous example re-done using isolate scope.</p>

<iframe style='width: 100%; height: 300px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/riMUgeMoOGbe7DW6QTnB/preview'></iframe>


<p>It looks a lot nicer without the synchronization code. That is because we moved that into the <code>scope</code> part of the directive declaration.</p>

<p>The way that the <code>scope</code> property works is the key is name you want to publish on the local scope, the value is a symbol that signifies how the local scope and the outer scope values will get linked.</p>

<ul>
<li><code>=</code> two way synchronization, by far the most common. This will link an outer scope property to an inner scope property, where the outer scope property is specified by what is in the attribute being referenced.</li>
<li><code>@</code> one way, this will copy the literal value from the attribute into the isolated scope. If the attribute value changes, the isolated scope property will be updated to reflect the change, but if the isolated property changes it doesn&rsquo;t get copied to the attribute.</li>
<li><code>&amp;</code> will wrap the expression in a function, which can then be called as needed. If the expression is a function, you can inject arguments into it by passing a context object at the point of invocation. This may not make much sense, but see the next plunk for an example.</li>
</ul>


<p>so for example, <code>scope: { foo: '=' }</code> means &ldquo;Isolate scope for this directive, and set up two way synchronization between a property on the local scope called foo, and whatever expression was entered into the property <code>foo</code> on this directives element&rdquo;.</p>

<p>Often, it is fine to use the same name as the attribute, but if you want to use something different, you can name the key whatever you like, and put the attribute name after the symbol. So <code>scope: { foo: '=bar' }</code> would be synching between the expression in the attribute called <code>bar</code>, and the isolated scope property <code>foo</code>.</p>

<p>Here is an example of all 3 types of isolate scope declarations</p>

<iframe style='width: 100%; height: 800px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/Sjm7MsqXbJjcn00yANvl/preview'></iframe>


<h2>Why would you ever not want to isolate scope in a directive?</h2>

<p>The only reason you don&rsquo;t isolate all directives is that there can only be one scope per element, so only one directive per element can ask for scope isolation.</p>

<p>In practice, this isn&rsquo;t as limiting as you would expect. Usually there is at most one directive per element which requires complex integration into the rest of the ui state. If there are other directives, they tend to just do things like configure 3rd party libraries.</p>

<p>Unfortunately, you should only use this feature if you really need it. If you are writing library code, you should go to even greater lengths to avoid it, since it can potentially restrict situations where the directive can be used.</p>

<p>This is one of the things I find frustrating about the framework, the properties of isolate scope are so incredibly useful when writing directives, they really should be always available (in my opinion).</p>

<h2>A few words of warning</h2>

<p>Scope enables most of the aspects that have made angular the most popular JavaScript framework today. But there are some gotchas that are good to be aware of</p>

<h3>Beware complex $watch expressions</h3>

<p>Angular takes a brute force approach to dirty checking (until ES6 anyways), which means that your watch expression can be run many, many times. Slow <code>$watch</code>s are the most common source of performance problems in angular apps.</p>

<h3>If there isn&rsquo;t a &ldquo;.&rdquo; in your binding expression, you are doing something wrong</h3>

<p>This is obvious if you understand how inheritance works, but comes up surprisingly often in issues by newbies. If you read from a property that is on ancestor scope, there is no problem. But if you write to a property on an ancestor scope, you will just end up adding the property to your local scope. By publishing objects on the scope instead of values, JavaScript will first have to find the object before writing, bypassing the problem.</p>

<p>Here is an example of the problem</p>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/zoGNvPsYHo5FnvS7OXn3/preview'></iframe>


<p>In general, just stick with the rule of thumb that binding expressions always need a dot in them.</p>

<h3>Think carefully before publishing on $rootScope</h3>

<p>It is a quick way to make something globally accessible, but there are several tradeoffs.</p>

<ul>
<li>It will make it hard to change in the future, since it is not apparent what is using the variable (since any view code could potentially be using it)</li>
<li>You are increasing the chance of a name collision. If something further down the page uses the same name, you could introduce a very subtle bug.</li>
<li>When properties are referenced on the <code>$rootScope</code>, it is not terribly clear where they come from.</li>
</ul>


<p>There is a time and place for <code>$rootScope</code>, but publishing to it should be done with thought and care.</p>

<h3>Debugging</h3>

<p>The <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en">Angular Batarang</a> is an incredibly helpful tool for exploring the current state of the scope on an element. It should be the first thing you reach for when scope isn&rsquo;t behaving the way you think it should</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Angular Directives]]></title>
    <link href="http://mattbriggs.net/blog/2014/01/14/understanding-angular-directives/"/>
    <updated>2014-01-14T11:34:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2014/01/14/understanding-angular-directives</id>
    <content type="html"><![CDATA[<p>Angular is the hottest JavaScript framework out there right now, and for good reason. It is a very powerful, flexible, and well designed framework for building web applications. However, like many projects, one of its major weaknesses is both the quantity, and quality, of its documentation. Because of that, Angular can be exceptionally difficult to learn.</p>

<p>Thankfully, a lot of Angular is pretty straightforward once you have a basic understanding of the concepts and some of the pitfalls. However, there is one topic that is definitely <em>not</em> straight forward at all, and is essential for any non trivial Angular work. That is directives.</p>

<p>This blog post is written with the assumption that you know basic Angular knowledge (things like <code>ng-if</code>, what a service is, what scope is). Also, when I talk about HTML, I am referring to the markup language, when I talk about the DOM, I am referring to an active, living tree of UI elements that is running in a browser.</p>

<h2>What is a directive?</h2>

<p>The tagline of Angular is &ldquo;Teach HTML New Tricks&rdquo;, and directives are the mechanism you use to make that happen. I would even go so far as to say that directives <em>are</em> Angular, the rest of the framework (with very few exceptions) is there to support the usage of directives.</p>

<p>In a more practical sense, directives are HTML artifacts which handle all DOM manipulation and interaction. This can be everything from jQuery style &ldquo;DOM enhancement&rdquo; code, to HTML control flow (like <code>ng-if</code> or <code>ng-switch</code>), to data binding (<code>ng-bind</code> / <code>ng-model</code>). Unfortunately, with that power and flexibility comes a substantial amount of complexity.</p>

<h2>Comparisons to Backbone Views</h2>

<p>The idea of a directive sort of lines up with a Backbone view, in that it is the place that you put code that interacts with the DOM.</p>

<p>A key difference, is that a Backbone view usually has a one to one relationship with a DOM element. In the case of Angular, it is quite common for multiple directives to be attached to the same DOM element.</p>

<p>Another difference is that in Backbone, there is a substantial amount of code required to wire together, views, the DOM, and the models/collections. In Angular, the wiring up is done by the framework, according to HTML annotations and dependancy injection.</p>

<p>This dramatically reduces the amount of code required to build a complex view. When people talk about writing less code in Angular, the majority of it comes from the lack of this code, which is pure boilerplate 90%+ of the time. However, it also means less flexibility in how to coordinate interactions between components. This is a double edged sword, having a single, well understood way of doing things makes the code easier to understand, but when you are doing something that pushes the framework, it means you have less tools at your disposal.</p>

<h2>Simple directives</h2>

<p>Let&rsquo;s look at what goes into building a simple directive. This directive will make an alert box pop up when you click on an element, which will say &ldquo;Hello, world!&rdquo;. If a name is provided when applying the directive, it will use that instead of &ldquo;world&rdquo;.</p>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/QExEdgNZkEDcwcJwkpuN/preview'></iframe>


<p>It is important to note that Angular will translate the name <code>myGreeting</code> which is properly cased JavaScript, into dashed case <code>my-greeting</code>, which is proper for html/css.</p>

<p>The first thing to look at is <code>restrict</code>, which determines how your directive will be used. This can be a combination of the following codes</p>

<ul>
<li><code>A</code>: restrict to attributes. <code>&lt;input type="text" my-greeting/&gt;</code></li>
<li><code>E</code>: restrict to elements. <code>&lt;my-greeting&gt;&lt;/my-greeting&gt;</code></li>
<li><code>C</code>: restrict to class. <code>&lt;button class="my-greeting"&gt;Greet!&lt;/button&gt;</code></li>
<li><code>M</code>: restrict to comment. <code>&lt;!-- directive: my-greeting --&gt;</code></li>
</ul>


<p>Now four choices in how to apply directives may seem to be a lot. In reality, it is considered to be a best practice to use the first two, since comments and classes are there for edge cases which very rarely occur. Typically, you will have more attribute directives then elements, since those are easier to compose.</p>

<h2>link function</h2>

<p>The next thing we will look at is the <code>link</code> function. To understand why it is named <code>link</code> only becomes clear after understanding the directive life cycle, but for now, think of it as the place where you put your DOM manipulation code.</p>

<p>You can see that we have three arguments being passed in &mdash; <code>scope</code>, <code>element</code>, and <code>attrs</code> (there are an additional two arguments which can be used, but they are for more advanced situations, which we will explore in future posts).</p>

<ul>
<li><p><code>scope</code> is the current scope of the element. It is hard to list all the ways a scope reference can be used in Angular. But in the context of directives, the core use case is to translate what is in the DOM into JavaScript properties, and apply DOM changes based on JavaScript properties. The best way to think of scope is the glue between the world of the view (HTML) and the world of the rest of your application (JavaScript).</p></li>
<li><p><code>element</code> is the DOM node on which the directive is applied, wrapped in jQuery. You can do anything to it that you would otherwise be able to do with jQuery. A good rule of thumb is that a directive should only ever really be modifying its own element. I would consider it a very strong code smell if a directive was doing DOM traversal to change other elements, or even worse, looking up other parts of the DOM by id or css.</p></li>
<li><p><code>attrs</code> is an instance of <code>ng.Attributes</code>. This is primarily useful for reading the properties of other attributes on <code>element</code>. It can also be used to react to an attribute changing (<code>attrs.$observe</code>), or to set a value on an attribute (<code>attrs.$set</code>). A nice property of <code>attrs</code> is that it will do the same casing normalization as what happens with directives &mdash; so if you were looking up the value of <code>my-attr="foo"</code> on an element, you would do it by checking <code>attrs.myAttr</code>.</p></li>
</ul>


<h2>The Angular directive lifecycle</h2>

<p>If you have made it this far, you already understand how to use a directive in a simple fashion. However, to fully understand directives, you have to understand how Angular uses them.</p>

<p>When you start your Angular application, you provide two pieces of information to the framework: A top level module, and a root element. The module is loaded, so that its dependancies can be registered for injections. The DOM node then gets passed to the <code>$compile</code> service for compilation.</p>

<p><code>$compile</code> walks the DOM tree, looking for nodes which have directives it knows about. Once it has this list built, it begins processing each one in turn.</p>

<p>To compile a node, Angular needs to know how to combine the world of HTML (the DOM node) with the world of Angular. When you provide a <code>link</code> function in a directive definition, you are telling Angular how to accomplish that task &mdash; how to link the two worlds together. This is also the point at which directive templates are compiled and inlined into the DOM.</p>

<p>Angular gets these linking functions by calling the <code>compile</code> function on each directive, in order of <code>priority</code>. <code>compile</code> defaults to whatever function is provided by the <code>link</code> property of the directive definition, if present. These linking functions are then combined into a composite linking function for that element.</p>

<p>Once all the linking functions are gathered, Angular will start linking from the bottom of the tree going up.</p>

<h2>compile vs link</h2>

<p>So that begs the question, when should you use <code>compile</code>, and when should you use <code>link</code>?</p>

<p>The easy answer is that you should just use <code>link</code>, unless you need to do something (like manipulate the child DOM nodes) before the linking process starts. Since <code>compile</code> happens before the scope really comes into play, its uses are dramatically limited to cases where you need control over the DOM <em>template</em> rather then the fully realized directive. If you are in a case where you do need <code>compile</code>, you must return your own linking function, since the <code>link</code> property of the directive definition will be ignored.</p>

<h2>Putting it all together</h2>

<p>Let&rsquo;s take <a href="http://c2.com/cgi/wiki?FizzBuzzTest">the classic FizzBuzz interview question</a>, and modify it to be about directives.</p>

<blockquote><p>Write a directive that will be applied to an element with
children, each containing a number. The directive will then
modify the child elements to apply a directive. When the
child element contains a number divisible by 3, apply a
<code>fizz</code> directive. When the number is divisible by 5, apply
a <code>buzz</code> directive. When it is divisible by both 3 and 5,
apply a <code>fizz-buzz</code> directive.</p>

<p>Each of those directives will change the element to display
the appropriate text (&lsquo;Fizz&rsquo;, &lsquo;Buzz&rsquo;, or &lsquo;FizzBuzz&rsquo;), and
increment a counter on the page.</p></blockquote>

<iframe style='width: 100%; height: 500px; background-color: white; margin: 20px 0' sandbox='allow-same-origin allow-scripts' src='http://embed.plnkr.co/fuCL1gTR0nQl5dYGsxU4/preview'></iframe>


<p>Directives are one of the most complex parts of Angular, but hopefully this post gives you a good foundation to build your knowledge on. There are more advanced properties and techniques available, but using what was described here will take you very far.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes, It's OK to Leave a Mess]]></title>
    <link href="http://mattbriggs.net/blog/2013/04/19/sometimes-its-ok-to-leave-a-mess/"/>
    <updated>2013-04-19T15:18:00-04:00</updated>
    <id>http://mattbriggs.net/blog/2013/04/19/sometimes-its-ok-to-leave-a-mess</id>
    <content type="html"><![CDATA[<h2>Recently&hellip;</h2>

<p>we watched the excellent lunch and learn video from <a href="http://hashrocket.com/">Hashrocket</a>, where <a href="http://sandimetz.com/">Sandi Metz</a> <a href="http://vimeo.com/48106365">talks about test design</a>. While the whole video is worth watching, one thing that stood out to me was her term &ldquo;Omega Mess&rdquo;.</p>

<p>The first time I heard someone refer to this concept was pairing with <a href="http://victorsavkin.com/">Victor Savkin</a>, where he referred to parts of the code as his &ldquo;Dirty little secrets&rdquo;. While this is still my favourite name for the concept, I think Sandi&rsquo;s name of Omega Mess, meaning a mess that is at the end of everything, is far more apt, so I have used it ever since.</p>

<h2>The Boyscout Rule</h2>

<p><a href="https://twitter.com/unclebobmartin">Uncle Bob</a> tells us that as professional software developers, we need to practice the Boyscout Rule, meaning always leave things in a cleaner state then when you arrive.</p>

<p>Imagine you are a developer, and you pick up a support task to fix a corner case bug in some crazy calculation. Now, this calculation is in a part of the application which is the stuff of legend on your team. It consists of a few thousand lines of code spread across a dozen different files with methods that have <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexities</a> reaching the levels of the national debt. You make a cup of coffee, put on some high energy music, and dig in.</p>

<p>Several hours later, you are pretty sure you understand the problem, and the interactions in code around that problem. You write a unit test to expose the issue, and go about fixing it. All you really need to do is add another <code>if</code> (in code already indented twelve levels deep), so you do it, the tests go green, and you breath a sigh of relief.</p>

<h2>The Choice</h2>

<p>It is at this point the boyscout rule comes into play. You have a choice; close the task, go to a bar, and drink until you no longer remember the pain of the day, OR, using the understanding you have gained over your long day of work, try do something that will make this horror slightly less horrific.</p>

<p>The programmer that believes the bar is the better option is putting his short term pain ahead of the long term maintainability of the application. They will say, &ldquo;I already wasted a whole day on this BS, time to move on to something new so that I can be productive!&rdquo;</p>

<p>The wise programmer knows that typing keys is not the only measure of productivity, and by not utilizing the knowledge gained to chip away at the vital task of improving the maintainability of this core part of the application, they are basically wasting a hard days worth of work, and not moving forward on a task which could one day become so important that the business dies because of it.</p>

<h2>The Omega Mess</h2>

<p>That cautionary tale may seem like I am overly stating the importance of <a href="http://c2.com/cgi/wiki?RefactorMercilessly">constant refactoring</a>, but software shops fail all the time because they don&rsquo;t do it.</p>

<p>Sometimes, the costs don&rsquo;t work out. Sometimes, it isn&rsquo;t worth putting in the time to clean things up. Those cases are when you are faced with code which a) basically works, and b) has a very low probability of change. Code that fits this profile is always at the end of a chain of method calls which is why &ldquo;Omega Mess&rdquo; is such a great name; it is a mess at the end of all the things.</p>

<p>One day you will probably want to clean it up when you have the free time, but there is also a pretty good chance that the only reason this code will ever change is because it is being re-written. If you are working on a large enough app, this is a relatively common occurrence. In this situation, being a good boyscout is a bad thing; you are wasting your company&rsquo;s time for very little benefit, and you are introducing the possibility of regressions for very little reason.</p>

<h2>How to determine probability of change</h2>

<p>This is really an experiential thing, but I would recommend asking yourself the following three questions</p>

<p><em>Is this code stable?</em> Some code gets written once, and then stays the same for years. While other code gets touched every few weeks or months. An omega mess is something that doesn&rsquo;t change much.</p>

<p><em>Does this code touch other code?</em> If your code is executing other code, there is now two possible reasons for this code to change. If the code it calls invokes other code, this can be an exponential thing. If code is not at the &ldquo;end of the line&rdquo;, chances are, it is not an Omega Mess.</p>

<p><em>How many places is this code called from?</em> An Omega Mess sits at the periphery of the system. If this code is called from 100 places in your application, it is important and needs to be fixed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[data-attributes are an anti-pattern]]></title>
    <link href="http://mattbriggs.net/blog/2012/08/10/data-attributes-are-an-anti-pattern/"/>
    <updated>2012-08-10T10:32:00-04:00</updated>
    <id>http://mattbriggs.net/blog/2012/08/10/data-attributes-are-an-anti-pattern</id>
    <content type="html"><![CDATA[<p>HTML5 has a lot of cool things in it, but the one thing I wish I could remove are data-attributes, because of the crimes against clean front-end code that it seems to encourage.</p>

<h2>What is this clean web code you speak of?</h2>

<p>We have 3 technologies that go into building a web app, HTML, CSS, and JavaScript. All three operate on an abstract concept called the DOM, in their own ways.</p>

<ul>
<li><p><em>css</em><br/>
This is the language we use to declaratively set the visual properties of our UI. It consists of a path matching syntax, and a series of rules. Clean css is a) readable, b) doesn&rsquo;t repeat itself too much, and c) is modular (i.e. you shouldn&rsquo;t have styles intended for one thing leak into another thing) CSS is very hard (and frustrating) to learn, and even harder to write well.</p></li>
<li><p><em>javascript</em><br/>
This is the language we use to specify the behaviour of our application. Up until the last 2 years there wasn&rsquo;t a lot of guidance on how to do this properly, but nowadays there is a tonne. Clean javascript is worthy of a book rather then a half paragraph, but for the purpose of this blog post, clean javascript is keeping your behaviour in javascript and your javascript out of the html. Also, that your DOM centric code should be segregated from the more abstract code.</p></li>
<li><p><em>html</em><br/>
Html is the language we use to form the base structure of the DOM. Many people confuse HTML with being the DOM, but that usually comes from not much javascript experience. The HTML should be expressing the structure of your interface in a very abstract way. For example, if you have a navigation sidebar, it may look something like this</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;nav&gt;</span>
</span><span class='line'>  <span class="nt">&lt;header&gt;</span>Pages<span class="nt">&lt;/header&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;foo.html&quot;</span><span class="nt">&gt;</span>foo<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;foo.html&quot;</span><span class="nt">&gt;</span>foo<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;foo.html&quot;</span><span class="nt">&gt;</span>foo<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;foo.html&quot;</span><span class="nt">&gt;</span>foo<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/nav&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is nothing talking about whether this sits at the left, right, or bottom of the page. There is nothing that talks about how the links should be pjaxing the main content div of the app. All it describes is a navigation widget at a very high level.</p>

<ul>
<li><em>the DOM</em><br/>
This is where all of those things come together. The DOM is the in memory representation of your UI. It has event handlers bound to elements, it has styles, and it changes dynamically. When you hit view source in your browser, you are looking at the html. When you open the web inspector, you are looking at the DOM (made to look html, due to how confused people are about these things).</li>
</ul>


<h2>The role of data attributes</h2>

<p>Data attributes are a new way of serializing information into a DOM node about what it represents, so that you are not forced to use the class attribute improperly. For example, a blog post could look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">&#39;video&#39;</span> <span class="na">data-publish-date=</span><span class="s">&quot;2012-08-10&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are using an article tag to represent the post, its class tells us what type of post it is (a video), and the data attribute is used to tell us something about it. This seems pretty obvious to me, class is for type of thing being represented, data is for that things data.</p>

<p>Now, with the rails 3 javascript helpers, to send some data to the server via AJAX, you do something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/posts&quot;</span> <span class="na">method=</span><span class="s">&quot;POST&quot;</span> <span class="na">data-remote=</span><span class="s">&quot;true&quot;</span> <span class="na">data-confirm=</span><span class="s">&quot;are you sure you want to post this?&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;[post]title&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;[post]body&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">data-disable-with=</span><span class="s">&quot;Loading…&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this looks like a very elegant solution to a common problem. But it&rsquo;s not really using data attributes the way they are intended to be used.</p>

<p>First we have the <code>data-remote="true"</code>. Why would you use a data attribute for something that obviously should be a class? <code>data-disable-with</code> and <code>data-confirm</code> are even worse, since they have a) nothing to do with data, and b) have no business being in the HTML.</p>

<h2>Why does it matter that rails co-opts data attributes?</h2>

<p>In the small scale, it really doesn&rsquo;t matter at all. More then that, it works very well. You can make arguments about purity and aesthetics, but at the end of the day, we are co-opting technology that was intended to model papers and blog posts, and using it to build applications. Rails as a whole is meant to build things like base camp, which is the smaller end of mid-sized application, so if you are building that kind of app then they will serve you well (just like the rest of the default rails stack).</p>

<p>If you are building highly dynamic apps, or larger scale apps, things start to break down. When people are taught by rails that data attributes are a way to configure javascript libraries, you end up with stuff like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">text_field_tag</span> <span class="s2">&quot;text_field_import_scenario_</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;width:346px;&quot;</span><span class="p">,</span> <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">24</span><span class="p">,</span> <span class="ss">:&#39;data-autocomplete-path&#39;</span> <span class="o">=&gt;</span> <span class="n">search_scenarios_quote_scenario_path</span><span class="p">(</span><span class="n">scenario</span><span class="o">.</span><span class="n">quote</span><span class="p">,</span> <span class="n">scenario</span><span class="p">),</span> <span class="ss">:&#39;data-autocomplete-raw-html&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:&#39;data-autocomplete-send-form&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:&#39;data-autocomplete-select&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;$j(&#39;#import_error_message&#39;).html(&#39;&#39;);$j(&#39;#text_field_import_scenario_</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#39;).val(ui.item.name); $j(&#39;#object_id_</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#39;).val(ui.item.value);&quot;</span><span class="p">,</span> <span class="ss">:&#39;data-autocomplete-after-update-bad&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;$j(&#39;#import_link_</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#39;).show(); resizePopup(&#39;import_pop_up_</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&#39;);&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>or completely baffling things, like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>data-print-action=&quot;check_sku:selected_skus:Item&quot;
</span></code></pre></td></tr></table></div></figure>


<p>One reason we strive for clean code is because it is easy to read. Since HTML is already a very verbose language, this becomes more important. Keeping things simple and focused is the heart of clean HTML, and the previous two examples are almost the antitheses of that. After 10 years we have finally gotten people to stop using inline styles, and the rails community is replacing that with something much worse to maintainable html, inline behaviour.</p>

<h2>Ok fine, rails is doing it wrong, but there are still valid use cases, right?</h2>

<p>The valid use case for data attributes are when you are doing relatively simple front end work, and jQuerying your way to victory. The javascript community has found that jQuerys DOM centric approach to code structure is a nightmare passed small scale, but if you are in the jQuery sweet spot, then you are also in the data-attribute sweet spot.</p>

<p>If you are doing more complex behaviours and interactions, making the DOM the source of truth is a bad idea. Your source of truth should be objects that wrap data structures and handle synching those data structures to a server. Beyond that, most of your UI will be rendered by javascript anyways, so you duplicating information that will not stay in synch.</p>

<h2>TL;DR;</h2>

<p>Data attributes are data, not javascript configuration. The rails way of using them works well in trivial cases, but gets exponentially worse the more complex your use cases get.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixins are not always a refactoring anti-pattern]]></title>
    <link href="http://mattbriggs.net/blog/2012/05/07/mixins-are-not-a-refactoring-anti-pattern/"/>
    <updated>2012-05-07T17:59:00-04:00</updated>
    <id>http://mattbriggs.net/blog/2012/05/07/mixins-are-not-a-refactoring-anti-pattern</id>
    <content type="html"><![CDATA[<p>Steve Klabnik just posted an interesting <a href="http://blog.steveklabnik.com/posts/2012-05-07-mixins--a-refactoring-anti-pattern">post about mixins</a>. Steve is a really smart guy, and I usually agree with him, but I think his justification is a little bit weak in this case.</p>

<h2>Mixin Refactoring through Class Gutting</h2>

<p>Oh man, he is so right that this is an anti-pattern. It happens a lot in ruby, someone says &ldquo;Hey, this thing is doing too much. The only method of code reuse I really believe in is mixins, so I&rsquo;ll just take the implementation, and dump it into a mixin.&rdquo;</p>

<p>By doing that, you haven&rsquo;t decreased complexity, you have actually increased it by breaking locality. Steve introduces the idea of reducing complexity through ecapsulation (right on), and talks about Data Mapper and Repository. Very OOP, and great solutions, especially in larger systems. Still diggin what Steve has to say.</p>

<h2>Method Count as a metric of complexity</h2>

<p>Here is where we part ways. Lets take the Enumerable module in the ruby standard library. It adds 94 methods on to a given thing, with the requirement that that &ldquo;thing&rdquo; provides an each method.</p>

<p>But enumerable is an &ldquo;idea&rdquo;, and if something is enumerable, you sort of know how to work with it &mdash; through those 94 methods.</p>

<p>Steve talks about how encapsulation reduces complexity of the implementation, well Enumerable encapsulates the &ldquo;idea&rdquo; of enumerating. So that means that when providing a public interface, a data structure can focus on its fairly simple implementation, and only provide the most low level and simplist of methods (each), while bringing in Enumerable and let it do the heavy lifting to give the rich interface that people expect from a ruby data structure.</p>

<p>How is that increasing complexity? When I look at Enumerable, it is talking about a single concept. When I look at array, it is talking about a single concept. The only thing I can change to break the implicit protocol between the two is to break the each method at a fundamental level.</p>

<p>Composition would have been a terrible choice here, I think providing 94 stub methods and an internal enumerator object would just increase the complexity, not reduce it. Providing an enumerator as an external thing would have made the api much more of a pain to work with. Inheritance would be better then composition or separation, but the problem is that Array is a datastructure, it is not an &ldquo;Enumerable&rdquo;. Enumeration is an ability, not the root of a concept. I think the best choice here is mixin, and that it is fairly obviously the best choice. And I think most people who have implemented data structures in ruby would agree.</p>

<p>So what we have is something that is close to inheritance, but more of a &ldquo;vertical slice&rdquo; of functionality. An &ldquo;ability&rdquo; rather then a &ldquo;thing&rdquo;. This is what mixins give up, the ability to model &ldquo;abilities&rdquo; in a concise way.</p>

<h2>What is complexity</h2>

<p>Rich Hickey defines complexity as an interleaving of ideas. I think that is a great definition. In the case of Enumerable, you are providing significant functionality through providing a simple implementation, the only interleaving is that each method. Sure, the runtime method count is 94 methods higher, but who cares? When you are calling methods on array, you are thinking of it as a single thing. When you are maintaining array, you don&rsquo;t have to worry about any interations with enumerable outside of each.</p>

<p>I think that the amount, and shape, of a mixins interaction with its containing class is a good measure of complexity. The amount and shape of a classes interactions with the internals of a mixin is a great metric of complexity. The only thing the number of runtime methods is telling you is that maybe you should be looking at those other things, which isn&rsquo;t that great a smell.</p>

<h3>The important thing here is interactions.</h3>

<p>Large classes often become complex. But it isn&rsquo;t a property of their runtime method count, or even inherant to their lines of code. It is because large classes and large methods tend to interact in ways that are hard to understand. Small classes can get complex too for the same reasons, but the larger the class, the easier it is to get to that place.</p>

<h2>Why &ldquo;Gut the class and dump&rdquo; it into a mixin doesn&rsquo;t work</h2>

<p>It doesn&rsquo;t work because you haven&rsquo;t tackled the complexity of the interactions in the code. Maybe it needs to get pulled into another class, maybe methods need to get merged together. Or maybe you are just talking about an inherantly complex thing, and doing the earlier things will make it worse. In any case it is not the runtime method count that will tell you this, it is analysis of how the class interacts with itself and others.</p>

<h2>Complexity Smells</h2>

<p>Steve wasn&rsquo;t writing about complexity smells in a general way, but since I have spent so much time talking about what isn&rsquo;t a smell, I sort of feel compelled to talk about what is. I am sure he would agree with most, if not all of the following</p>

<ul>
<li>When a mixin mucks with class internals.</li>
<li>When a mixin mucks with other mixins.</li>
<li>When you read the inheritor of a class, and can&rsquo;t understand it without reading its parent</li>
<li>When you read an inherited class, but can&rsquo;t understand it without its children</li>
<li>When there are so many interactions with other things that you have to read many classes to understand how a single thing works</li>
<li>When classes do too many things</li>
<li>When classes have too many dependancies</li>
<li>When classes are aware of too many other objects</li>
<li>When too many other objects are aware of a class</li>
</ul>


<p>And that is just the tip of the iceburg. I would say that a significant percentage of our job is managing complexity in code, it is a huge and nuanced topic. Mixins are also not a simple thing, and are extremely easy to use in the wrong ways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Many Faces of Ruby Callables]]></title>
    <link href="http://mattbriggs.net/blog/2012/05/05/the-many-faces-of-ruby-callables/"/>
    <updated>2012-05-05T15:58:00-04:00</updated>
    <id>http://mattbriggs.net/blog/2012/05/05/the-many-faces-of-ruby-callables</id>
    <content type="html"><![CDATA[<p>One of the most valuable ideas from functional programming is the idea of <em>Higher Order Functions</em>, or functions that take functions as an argument. It is such a good idea that it has become part of pretty much every modern language, whether functional or not. Amoung the OO imperative languages that have embraced this idea, the ruby community has probably gone the furthest, where it is the first tool a library writer will reach for more often then not.</p>

<p>The language feature required for this style of programming is known as <em>first class functions</em>, meaning functions that can be defined as a variable, passed around, and called by other parts of code. Ruby has four constructs for this, which are all similar, but have slight differences.</p>

<h2>The Block</h2>

<p>The idea behind blocks is sort of a way to implement really light weight strategy patterns. A block will define a coroutine on the function, which the function can delegate control to with the yield keyword. We use blocks for just about everything in ruby, including pretty much all the looping constructs. Anything outside the block is in scope for the block, however the inverse is not true, with the exception that return inside the block will return the outer scope. They look like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="k">yield</span> <span class="s1">&#39;called foo&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#usage</span>
</span><span class='line'><span class="n">foo</span> <span class="p">{</span><span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">msg</span><span class="p">}</span> <span class="c1">#idiomatic for one liners</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="c1">#idiomatic for multiline blocks</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">msg</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Proc</h2>

<p>The best way to think of a proc is that it is the more general form of a block. A block is tied to a specifc function (the whole coroutine thing), while a proc is just a variable. This means that you can easily convert a block to a proc.</p>

<p>An interesting use is that you can pass a proc in as a replacement for a block in another method. Ruby has a special character for proc coercion which is <code>&amp;</code>, and a special rule that if the last param in a method signature starts with an <code>&amp;</code>, it will be a proc representation of the block for the method call. Finally, there is a builtin method called <code>block_given?</code>, which will return <code>true</code> if the current method has a block defined. It looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">foo</span> <span class="p">{</span><span class="nb">puts</span> <span class="s1">&#39;hi&#39;</span><span class="p">}</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">call</span> <span class="c1"># hi</span>
</span></code></pre></td></tr></table></div></figure>


<p>To go a little further with this, there is a really neat trick that rails added to <code>Symbol</code> (and got merged into core ruby in 1.9). That <code>&amp;</code> coercion does its magic by calling <code>to_proc</code> on whatever it is next to. So adding a <code>Symbol#to_proc</code> that calls itself on whatever is passed in lets you write some really terse code for any aggregation style function that is just calling a method on every object in a list.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>    <span class="s1">&#39;this is from bar&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">foo</span><span class="o">|</span> <span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p">}</span> <span class="c1"># returns [&#39;this is from bar&#39;, &#39;this is from bar&#39;, &#39;this is from bar&#39;]</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">map</span> <span class="o">&amp;</span><span class="ss">:bar</span> <span class="c1"># returns _exactly_ the same thing</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is fairly advanced stuff, but I think it illustrates the power of this construct.</p>

<h2>Lambdas</h2>

<p>The purpose of a lambda is pretty much the same as the first class functions in other languages, a way to create an inline function to either pass around, or use internally. Like blocks and procs, lambdas are closures, but unlike the first two it enforces arity, and return from a lambda exits the lambda, not the containing scope. You create one by passing a block to the lambda method, or to &ndash;> in ruby 1.9</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">msg</span><span class="p">}</span> <span class="c1">#ruby 1.8</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">msg</span><span class="p">}</span> <span class="c1">#ruby 1.9</span>
</span><span class='line'>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span> <span class="c1"># =&gt; foo</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Methods</h2>

<p>Only serious ruby geeks really understand this one :) A method is a way to turn an existing function into something you can put in a variable. You get a method by calling the <code>method</code> function, and passing in a symbol as the method name. You can re bind a method, or you can coerce it into a proc if you want to show off. A way to re-write the previous method would be</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:puts</span><span class="p">)</span>
</span><span class='line'><span class="n">l</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is happening here is that you are creating a method for puts, coercing it into a proc, passing that in as a replacement for a block for the lambda method, which in turn returns you the lambda. One thing I often use this for is debugging in concert with tap.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code maps an array of integers to an array of integers that have been doubled, and then sums them. If you want to see the result of the map, you can do something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">}</span><span class="o">.</span><span class="n">tap</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:puts</span><span class="p">))</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>tap</code> will yield the thing that it is called on to a block, and then return the original thing. So what I am doing is saying turn <code>puts</code> (which takes a single argument) into a method, coerce it into a block, and give it as the implementation for <code>tap</code>, meaning just puts out the value. Since tap returns the original thing, the rest of the method chain will be undisturbed.</p>

<h2>Going Deeper with &amp;:symbol</h2>

<p>Lets say you are really digging the trick of <code>&amp;:sym</code>, and you have a case where the block is going to yield additional arguments, but you actually WANT those arguments to be passed in as well when the <code>Obj.send :sym</code> happens. <code>Symbol#to_proc</code> is basically implemented like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Symbol</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>    <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, <code>&amp;:sym</code> is going to make a new proc, that calls <code>.send :sym</code> on the first argument passed to it. If any additional args are passed, they are globbed up into an array called <code>args</code>, and then splatted into the <code>send</code> method call.</p>

<h2>Ruby is pretty awesome</h2>

<p>A lot of these capabilities exist in other languages, but very few imperative OO communities have run with them the way that rubyists have. A deep understanding of the tools available is an important part of any ruby developers journey to becoming an expert at the language. Back when I was looking for some new language to try and was trying to decide whether to roll with ruby or python first, rubys block obsession was what made me go ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Emacs Plugins: CTags]]></title>
    <link href="http://mattbriggs.net/blog/2012/03/18/awesome-emacs-plugins-ctags/"/>
    <updated>2012-03-18T00:18:00-04:00</updated>
    <id>http://mattbriggs.net/blog/2012/03/18/awesome-emacs-plugins-ctags</id>
    <content type="html"><![CDATA[<p>I wanted to write a series of posts on awesome emacs plugins I use, since I have put a lot of time and effort into <a href="http://github.com/mbriggs/.emacs.d">my emacs configs</a>. The funny thing I find about emacs though is that there is such a massive amount of functionality already provided, most neat things plugins do is augment stuff that is already there. So I think most of these posts are going to be a third about emacs, a third about a plugin, and a third about the glue code tying them together :)</p>

<h2>Code Tags</h2>

<p>The purpose of tags is to parse a codebase, and provide information about its structure (mostly for the purposes of navigation). There are many tools used to create tag index files, emacs even ships with one called etags.</p>

<h2>Tags in Emacs</h2>

<p>Coming from vim, one of the things I found was that emacs tag handling was inferior to vims for some reason. Most of the time, when I would do a <code>c-]</code> in vim I would land exactly where I would expect to. In emacs, I would find I needed to jump through the matches far more often to find what I wanted.</p>

<h2>CTags</h2>

<p>One difference was the tagging program. Vim uses something called exuberant-ctags, while emacs uses something called etags. From what I can tell, for the languages I use (javascript and ruby mostly), exuberant-tags does a noticeably better job.</p>

<p>Thankfully, ctags actually supports the format emacs is expecting, you just have to pass a -e argument. I only had to slightly modify my normal ctags command, and I had</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ctags -e -R --extra<span class="o">=</span>+fq --exclude<span class="o">=</span>db --exclude<span class="o">=</span><span class="nb">test</span> --exclude<span class="o">=</span>.git --exclude<span class="o">=</span>public -f TAGS
</span></code></pre></td></tr></table></div></figure>


<p>The last thing I want to do is have to jump to a terminal and type that out, so I wrote this quick little function in elisp to do the heavy lifting for me</p>

<figure class='code'><figcaption><span>build-ctags </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">build-ctags</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">message</span> <span class="s">&quot;building project tags&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">root</span> <span class="p">(</span><span class="nf">eproject-root</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">shell-command</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f &quot;</span> <span class="nv">root</span> <span class="s">&quot;TAGS &quot;</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">visit-project-tags</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">message</span> <span class="s">&quot;tags built successfully&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">visit-project-tags</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">tags-file</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">eproject-root</span><span class="p">)</span> <span class="s">&quot;TAGS&quot;</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">visit-tags-table</span> <span class="nv">tags-file</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">message</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;Loaded &quot;</span> <span class="nv">tags-file</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That may be a bit confusing to people unfamiliar with elisp, so I&rsquo;ll walk through it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">build-ctags</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part means &ldquo;Make an elisp function called build-ctags, and mark it as interactive so that it can be invoked via m-x&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">root</span> <span class="p">(</span><span class="nf">eproject-root</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">shell-command</span> <span class="p">(</span><span class="nf">concat</span> <span class="s">&quot;ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f &quot;</span> <span class="nv">root</span> <span class="s">&quot;TAGS &quot;</span> <span class="nv">root</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means &ldquo;Make a variable called root that is the result of the eproject-root function&rdquo; <code>eproject</code> is another library I will cover some other time, but one thing it gives you is a function that returns the root path of the current project. You could just as easily replace it with <code>(rinari-root)</code> (if you use rinari for rails projects) and it would work just as well. I will assume <code>shell-command</code> is self explanitory :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">visit-tags-table</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last piece just means replace the currently loaded tag file with whats on the disk.</p>

<p>With that function, my navigation became a bit more comfortable in emacs, but I still found sometimes emacs would bring me to really strange places. After a bit of research, I found the incredibly obscurely named <code>tags-case-fold-search</code> variable. From the docs:</p>

<blockquote><blockquote><p>Documentation:
*Whether tags operations should be case-sensitive.
A value of t means case-insensitive, a value of nil means case-sensitive.
Any other value means use the setting of `case-fold-search&#8217;.</p></blockquote></blockquote>

<p>Setting that to <code>nil</code> helped immensely.</p>

<h2>etags-select</h2>

<p>Now for the actual plugin :) <a href="http://www.emacswiki.org/emacs/EtagsSelect">etags-select</a> If there is a single result, you jump straight to it, but if there are multiple results, it will pop up a window showing them all. n will go to the next match, p to the previous, and enter will select the current result and jump to that line.</p>

<p>I made another small command that I could bind to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">my-find-tag</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">file-exists-p</span> <span class="p">(</span><span class="nf">concat</span> <span class="p">(</span><span class="nf">eproject-root</span><span class="p">)</span> <span class="s">&quot;TAGS&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">visit-project-tags</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">build-ctags</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">etags-select-find-tag-at-point</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;M-.&quot;</span><span class="p">)</span> <span class="ss">&#39;my-find-tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That function will check if the tags file is there, if it is, read it, if not, build it, then run that plugin function <code>etags-select-find-tag-at-point</code>.</p>

<p>To invoke it, put the point on a symbol and hit M-.</p>

<h2>.ctags</h2>

<p>Last thing, for some better ctags support for rails, and support for OO javascript, add this to your <code>~/.ctags</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--regex-ruby=/(^|[:;])[ \t]*([A-Z][[:alnum:]_]+) *=/\2/c,class,constant/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*(has_many|belongs_to|has_one|has_and_belongs_to_many)\(? *:([[:alnum:]_]+)/\3/f,function,association/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*(named_)?scope\(? *:([[:alnum:]_]+)/\3/f,function,named_scope/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*expose\(? *:([[:alnum:]_]+)/\2/f,function,exposure/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2/f,function,aasm_event/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2!/f,function,aasm_event/
</span><span class='line'>--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2?/f,function,aasm_event/
</span><span class='line'>
</span><span class='line'>--langdef=js
</span><span class='line'>--langmap=js:.js
</span><span class='line'>--regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\{/\1/,object/
</span><span class='line'>--regex-js=/([A-Za-z0-9._$()]+)[ \t]*[:=][ \t]*function[ \t]*\(/\1/,function/
</span><span class='line'>--regex-js=/function[ \t]+([A-Za-z0-9._$]+)[ \t]*\(([^)])\)/\1/,function/
</span><span class='line'>--regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\[/\1/,array/
</span><span class='line'>--regex-js=/([^= ]+)[ \t]*=[ \t]*[^"]'[^']*/\1/,string/
</span><span class='line'>--regex-js=/([^= ]+)[ \t]*=[ \t]*[^']"[^"]*/\1/,string/
</span><span class='line'>
</span><span class='line'>--exclude=*.min.js
</span><span class='line'>--exclude=.git</span></code></pre></td></tr></table></div></figure>


<h2>Navigating with Emacs</h2>

<p>I find my experience now much better then it was before, but there is always room for improvement. Any comments, criticisms, or tips that I am missing would be hugely appreciated :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I like Object#tap]]></title>
    <link href="http://mattbriggs.net/blog/2012/03/08/why-i-like-object-number-tap/"/>
    <updated>2012-03-08T01:28:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2012/03/08/why-i-like-object-number-tap</id>
    <content type="html"><![CDATA[<p>In a recent <a href="http://www.destroyallsoftware.com">Destroy All Software</a> screencast, Gary mentioned how he really doesn&rsquo;t like <code>Object#tap</code>. He was using it in this sort of context</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StoreCache</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">CachedScore</span><span class="o">.</span><span class="n">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">CachedScore</span><span class="p">:</span><span class="ss">:NoScore</span>
</span><span class='line'>    <span class="no">RockScore</span><span class="o">.</span><span class="n">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">score</span><span class="o">|</span>
</span><span class='line'>      <span class="no">CachedScore</span><span class="o">.</span><span class="n">save_score</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>He said he didn&rsquo;t understand why people like that syntax so much, when you could just as easily do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StoreCache</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">CachedScore</span><span class="o">.</span><span class="n">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">CachedScore</span><span class="p">:</span><span class="ss">:NoScore</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="no">RockScore</span><span class="o">.</span><span class="n">for_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>    <span class="no">CachedScore</span><span class="o">.</span><span class="n">save_score</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
</span><span class='line'>    <span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>with the differences being that the name of the variable is on the left side, and the return is more explicit. I sort of get where he is coming from, but I would not use tap that way.</p>

<h2>What <code>Object#tap</code> means to me</h2>

<p>I think he (and many others) see <code>Object#tap</code> as meaning &ldquo;fancy method that give me a 1 character placeholder variable and implicit return&rdquo;. I see tap as meaning &ldquo;tap into the object initialization&rdquo;, or more practically &ldquo;This entire expression is related to object initialization.&rdquo;</p>

<p>Typically, I wont use <code>tap</code> unless there is a high degree of locality, and you are talking about left-side = right-side type code. Something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">build_foo</span>
</span><span class='line'>  <span class="no">Foo</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">bar</span> <span class="o">=</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">baz</span> <span class="o">=</span> <span class="s2">&quot;Baz&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Building out values on an object is an incredibly common pattern that is logically a single thing. Visually, tap is grouping the code for that pattern. Also, I find it reduces density in a place where the additional verbosity really doesn&rsquo;t add anything in terms of clarity. At work, we are still using 1.8.7 ree, so when we need ordered hashes (often as identifiers for keys on objects), we have a lot of code that looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">UNIT_OF_MEASURES</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:OrderedHash</span>
</span><span class='line'><span class="no">UNIT_OF_MEASURES</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Eaches&quot;</span>
</span><span class='line'><span class="no">UNIT_OF_MEASURES</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Cases&quot;</span>
</span><span class='line'><span class="no">UNIT_OF_MEASURES</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Pallets&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think the move from that to tap style is a significant improvement</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">UNIT_OF_MEASURES</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:OrderedHash</span><span class="o">.</span><span class="n">tap</span> <span class="o">|</span><span class="n">uom</span><span class="o">|</span>
</span><span class='line'>  <span class="n">uom</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Eaches&quot;</span>
</span><span class='line'>  <span class="n">uom</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Cases&quot;</span>
</span><span class='line'>  <span class="n">uom</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Pallets&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last thing is the fact that its a single expression. I love implicit returns in ruby where your entire method is a single expression, it feels kind of lispy. Something like this</p>

<figure class='code'><figcaption><span>me likey </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="n">some_predicate?</span> <span class="p">?</span> <span class="s2">&quot;Hi!&quot;</span> <span class="p">:</span> <span class="s2">&quot;Bye&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, I am really not a fan of implicit returns when you just end a function with a bare word. If you are writing imperative style of code, I think each statement should actually be a statement that says what it does. Something like this just sort of feels like a mis-use of a language feature.</p>

<figure class='code'><figcaption><span>ugh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>  <span class="n">thing</span> <span class="o">=</span> <span class="n">build_thing</span>
</span><span class='line'>  <span class="n">thing</span><span class="o">.</span><span class="n">some_method</span>
</span><span class='line'>  <span class="n">thing</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is something that I think falls squarely into personal style. But because of how I enjoy writing more expression oriented code, having an expression for a common pattern is a big plus for me.</p>

<p>Another interesting thing to note is that in rails-land, it is very common to use hash initializers for this kind of thing. Something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">create!</span> <span class="ss">author</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span>
</span><span class='line'>             <span class="ss">published</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>             <span class="ss">category</span><span class="p">:</span> <span class="s2">&quot;some-category&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While that syntax is very minimal, I actually prefer the <code>Object#tap</code> style of api, because I find it gives a clearer separation between plain old method arguments, and object initialization.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">create!</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">published</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">p</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="s2">&quot;some-category&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Not Hatin On Gary</h2>

<p>The dude is awesome, and everyone who is a professional ruby developer really should subscribe to his podcasts. IMO the guy is a master of OO, and his screencasts are far more valuable then 10$ and 15mins of your life per month.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Emacs Plugins: Evil Mode]]></title>
    <link href="http://mattbriggs.net/blog/2012/02/27/awesome-emacs-plugins-evil-mode/"/>
    <updated>2012-02-27T15:58:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2012/02/27/awesome-emacs-plugins-evil-mode</id>
    <content type="html"><![CDATA[<p>I want to do a series of posts on some of the cool emacs plugins I use. Before I do that though, I want to talk a bit about why I use and love emacs. The saying &ldquo;Care about the code, not the tools&rdquo; is an anathama to me, it is like &ldquo;Care about breathing, but don&rsquo;t worry about drinking&rdquo;. Breathing is incredibly important, I agree, but consuming liquid regularily is pretty high up there on the list too! Anyways, this is my journey through tooling with working with code. This post is going to be a story of epic proportions, with very little &ldquo;hard&rdquo; content, but I plan on doing more posts that are more focused on the awesomeness of emacs plugins.</p>

<h2>The Dark Years: Integrated Development Enviornments</h2>

<p>I used IDEs for years, and while I appreciated the power, there was some things missing. The first thing was even with plugins, the barrier to customization was quite high. I love solving problems with code, and while solving other peoples problems is a fun and interesting (and profitable) endevour, solving your own problems is usually far more satisfying. Second, they are by their nature, built for a specific language and platform. Lastly, they are quite slow, and require quite a bit of resources. At my last job, it would take almost 7 minutes to go from a reboot to everything up and pointing to the right things. Now, even with a boatload of scripts, emacs loads in about 1s.</p>

<h2>The Cult of Vim</h2>

<p>When I started doing rails work, I started taking vim more seriously. Vim gave me the speed, and the custommizability. I quickly crafted a set of fairly elaborate configs where everything was exactly how I liked it. But beyond that, I discovered what a joy modal editing is. The best way I can describe it is a programming language for editing. The ability to think of fragments of code as objects that i can perform functions on is a wonderful and freeing thing. Once it becomes second nature, it feels like I am talking to my editor in a high level way with my fingers. A nice side effect is that my hands <em>never</em> leave the keyboard. It is highly efficient, but efficiency isn&rsquo;t even the biggest benefit, it is a joy thing. I find it much more enjoyable to edit code with modal editing.</p>

<p>Eventually you reach a point where you want to be writing your own stuff in vim as well, and you have to start learning vimscript, which is possibly the most terrible language ever conceived of. Vim is awesome, vim plugins are awesome, but vimscript is just one big WTF. More then that, I was starting to get into lisp in a pretty big way, and you can&rsquo;t compare vim experience to the emacs experience. I also was sort of frustrated by the lack of ability to show the output of an external process in a seperate buffer, especially since I do TDD.</p>

<h2>The Light of Emacs</h2>

<p>The old arguments between vim and emacs focused on speed, but when you are comparing either to eclipse, the amount of speed difference beween vim and emacs now is unnoticable. Same deal with resources, emacs is sitting at 250megs right now, which is more then vim, but a small fraction of chrome. That brings us to the strengths, which for emacs is it does pretty much everything vim does, but better, except for the act of actually editing text. It also does way more then vim can do, some of it quite unique (org mode) useful (regexp-builder) or suprisingly powerful (calc).</p>

<p>The other major thing is elisp vs vimscript. I have a strongly passionate (bordering on irrational) love of lisp, so for me it was not even worth talking about, something lispy vs a really terrible dynamic imperative language, I will choose the lispy thing every time. elisp is far from the greatest lisp out there, but compared to vimscript it is wonderful. There is also a philsophy in emacs that emacs is a platform, with an editor implemented in it. Vim philosphy is vim is an editor that you can script if that makes you happy. Very different, and since I have such a dedication to my tooling, I definately appreciate the emacs side.</p>

<p>The thing that was always a sticking point for me was modal editing. As much as I love modal editing, I hate emacs editing. There is something about the way my brain works that makes it extremely hard to remember key chords. I can happy do &ldquo;<code>ci'blahfT;;.</code>&rdquo; and have no problems, but <code>c-c</code> <code>m-x t</code> will leave my brain after about 10 minutes of not using it.</p>

<p>After some time lusting over emacs and being defeated by its keybindings, I read about viper-mode, which was a vim emulator. I tried it out, but after trying <code>ci"</code> and having it not work, I realized it wasn&rsquo;t enough. I poked around the internet a bit, and found out about vimpulse, which promised much more in terms of vim emulation. I actually went a day on vimpulse before switching back, there were just too many inconsistancies and other small things that were missing, or not working the way they should.</p>

<h2>Evil.</h2>

<p>I went a few months, sort of keeping taps on emacs, but not really expecting to be able to switch. Eventually I heard about evil, and I eagerly installed it. Wow. After trying vim emulators in many other editors, which range from the level of viper mode to a bit under vimpulse, evil was like a light in the darkness. These guys really &ldquo;get&rdquo; vim, and are serious about re-implementing it. I have been using it for a few months every day, and there are only a few things missing.</p>

<ul>
<li>it ignores punctuation. if you have <code>function foo(){}</code>, and your cursor is at the end of the line, in vim db will leave you with <code>function foo</code>, in evil, it leaves you with <code>function</code>. This is because vim will treat punction as a word, while evil does not. I still find this regularly frustes me.</li>
<li>there is no <code>:g</code>. There are a ton of <code>:</code> commands missing, but I find the lack of <code>:g</code> the thing I really miss, since most of the other stuff is covered by emacs functions</li>
<li>the <code>b</code> text object is broken in js2 mode. I use js2 a lot, love it, and consider it one of the reasons as a web developer to switch from vim to emacs.</li>
</ul>


<h2>Evil for Vim users</h2>

<p>First, in emacs, next line/prev line is <code>c-n</code>, <code>c-p</code>. The reason you need to know this is because there are other emacs major modes that have nothing to do with editing, but will usually use <code>c-n</code>/<code>c-p</code> or <code>n</code>/<code>p</code> as the method to navigate from the next and previous item.</p>

<p>In vim, it applies scripts via various events. Combing two things together means running one event, followed by the other event. In emacs, you are composing modes. Every buffer in emacs has a single major mode, that defines what type of thing you are doing. A major mode could be &ldquo;ruby&rdquo;, but it could also be an email client. Emacs is the platform, and a major mode is the application. You also have minor modes, which add additional features to a major mode. I have a plugin called autopair, that will keep delimiters balanced (I use delimMate to do the same thing in vim), that is a minor mode. So your editing experience is basically defined by composing a major mode with multiple minor modes.</p>

<p>This is a really cool thing, if you write vim plugins, usually you see a block where they have to unregister all sorts of things they registered if the filetype changes, that is a non issue in emacs, because nodes are self-contained entities. The bad thing is in the age of web development, we have to deal with files that have multiple major modes (like erb, which can have html, css, ruby, and javascript). This is probably the biggest weakness of emacs at the moment, it was designed with a single major mode per buffer, so you cannot compose major modes. There are many attempted hacks around this, but IMO they are all terrible.</p>

<p><code>M-x</code> in emacs means &ldquo;Execute command&rdquo;. All the commands will be available there. <code>M-x describe-key</code> is extremely useful, you type that then hit a key, and it will tell you what function it is bound to. Once you have that, you can do <code>M-x describe-function</code> and enter that function name to view its documentation.</p>

<p>Lastly, if you are a vim user, you need to know how to bind keys. The idea in emacs is instead of registering keys at a global level, each mode has a keymap that is self contained. So when you compose your modes, you are also composing keymaps. the syntax for keymaps is</p>

<figure class='code'><figcaption><span>keymaps </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">&lt;keymap&gt;</span> <span class="nv">key</span> <span class="ss">&#39;function</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; evil defines 3 maps for the various states, so to</span>
</span><span class='line'><span class="c1">; replicate a mapping I had in vim - nmap Y y$</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">copy-to-end-of-line</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">evil-yank</span> <span class="p">(</span><span class="nf">point</span><span class="p">)</span> <span class="p">(</span><span class="nf">point-at-eol</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">define-key</span> <span class="nv">evil-normal-state-map</span> <span class="s">&quot;Y&quot;</span> <span class="ss">&#39;copy-to-end-of-line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was a custom function definition, but you can also use any built in function after the <code>'</code>.</p>

<p>Everything in emacs I know, I know by its function name. If I use it a lot, I will map it to a key, so I have pretty much completely ignored the real keybinds.</p>

<h2>Evil for Emacs Users</h2>

<p>I honestly don&rsquo;t think I am qualified to write this, because I was never a real emacs user. But if you were ever curious about why people go on and on about how awesome vim is, evil will pretty much give you that experience, and you can have it without leaving the editor you already know and love. I believe evil mode is more effective then traditional emacs, but even if it isn&rsquo;t I am pretty sure it is more enjoyable. I would strongly encourage people to give it a chance for a month or so with a &ldquo;Learn vim&rdquo; tutorial, and see how they find thinking in text objects. We are definately in YMMV territory, but I find it a joy. <a href="http://dnquark.com/blog/2012/02/emacs-evil-ecumenicalism/">You may find this post more tailored to your point of view</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repository Pattern In Rails]]></title>
    <link href="http://mattbriggs.net/blog/2012/02/23/repository-pattern-in-ruby/"/>
    <updated>2012-02-23T22:59:00-05:00</updated>
    <id>http://mattbriggs.net/blog/2012/02/23/repository-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>I have been working a lot on an app using MongoDB as the datastore, and Mongoid as the OR/M (or ODM to be more specific). In a relational database, you keep your data as segregated as reasonably possible, and then join it together in appropriate ways when you need it. The up side to this is that it is incredibly flexible, and chances are you wont hit a situation where you need your data in a form that your datastore can&rsquo;t give to you. The down side is that often, your data has a &ldquo;natural&rdquo; way that is joined together, and even though 99.9% of the time you are joining it together in that way, you still pay the cost every time.</p>

<p>In Mongo, your data is stored in that &ldquo;natural&rdquo; way in a json format. That means it is harder to shape the data in different ways, but it is free to get the data in the way it is intended to be used.</p>

<h2>The Problem</h2>

<p>This app was developed using a state-based testing approach, where every test sets up a situation, performs an action, and then asserts on the new state of the world. An interesting side effect of the Mongo way of storing data is that it makes it much harder to test smaller objects in isolation &mdash; if a comment is a hash in an array in a post, it is impossible to save without first saving the post. In more complex scenarios, the problem gets much worse, and I am finding that tests that should be rather simple are requiring far more setup then I would expect.</p>

<h2>A Solution: The Repository</h2>

<p>When it comes to data access, the book Domain Driven Design advocates using a repository layer that separates your domain objects from your data access strategy. This has several benefits:</p>

<ul>
<li>Your domain objects stay simple. Rails developers tend to follow the &ldquo;Thin controller, fat model&rdquo; heuristic fairly religiously. There is nothing wrong with that per se, but it sort of implies it is ok to have massive classes that do dozens (if not hundreds) of things, so long as it is the model. The problem with that is that as the complexity of the application grows, these &ldquo;God&rdquo; models tend to become harder and harder to maintain &mdash; everything interacts with them, and they interact with everything. That kind of situation is what causes even small changes to cause ripples through your entire applications, and makes even simple maintenance tasks become quite daunting.</li>
<li>You segregate your interaction with third party code (ActiveRecord, or in my case Mongoid) from the rest of your application. You may say &ldquo;Why is that necessary when you rarely, if ever change your data storage strategy?&rdquo; The reason is that you don&rsquo;t have control over that code, it is managed by a third party. So if they change something, and you are calling their code directly all through your application, your entire application needs to change. I work on quite a large enterprise rails app, and the 2.x &ndash;> 3.x upgrade was a huge undertaking, mostly for this reason.</li>
<li>By following the Single Responsibility Principal, mocking in tests is a joy. This is going to address the pain I am feeling doing state based testing with a document datastore, and I believe that mockist testing will directly address these problems (I also much prefer mocking, so it is not exactly a direction I am resisting)</li>
</ul>


<h2>First Challenge: Mapping</h2>

<p>I have worked on systems in C# with manual object mapping in repositories, and it is a bit of a nightmare. You end up with hundreds of lines of <code>right_side.property = left_side.property</code> code, which apart from being horribly tedious to write, is actually a terrible source of hard to find bugs. Since we don&rsquo;t have a true data mapper library in ruby, the only way I will even attempt this is if I can automate the process through some clever meta-programming. The first part of that is that I need to be able to retrieve attributes from my domain objects in a simple way, without complicating the objects too much. I also need to be able to get the &ldquo;schema&rdquo; out of my model, so I am able to infer what it wants to save and retrieve.</p>

<h2>This is going to be a lot of work</h2>

<p>The app is currently ~1k loc on the server side, which means it is going to take some time, but is really not an insurmountable task yet. The first step will be figuring out how to tackle the domain model side of the mapping problem, and extracting a domain model out of the current mongoid model. Stay tuned for more!</p>
]]></content>
  </entry>
  
</feed>
